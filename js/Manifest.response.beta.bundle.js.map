{"version":3,"file":"Manifest.response.beta.bundle.js","sources":["webpack://universal/./src/EXTM3U/EXTM3U.mjs","webpack://universal/./src/class/AttrList.mjs","webpack://universal/./src/database/index.mjs","webpack://universal/./src/function/aPath.mjs","webpack://universal/./src/function/detectPlatform.mjs","webpack://universal/./src/function/detectPlaylist.mjs","webpack://universal/./src/function/isStandard.mjs","webpack://universal/./src/function/setCache.mjs","webpack://universal/./src/function/setENV.mjs","webpack://universal/./src/function/setOption.mjs","webpack://universal/./src/utils/Lodash.mjs","webpack://universal/./src/utils/Storage.mjs","webpack://universal/./src/utils/URL.mjs","webpack://universal/./src/utils/done.mjs","webpack://universal/./src/utils/fetch.mjs","webpack://universal/./src/utils/getStorage.mjs","webpack://universal/./src/utils/initGotEnv.mjs","webpack://universal/./src/utils/logError.mjs","webpack://universal/./src/utils/notification.mjs","webpack://universal/./src/utils/platform.mjs","webpack://universal/./src/utils/runScript.mjs","webpack://universal/./src/utils/utils.mjs","webpack://universal/./src/Manifest.response.beta.js"],"sourcesContent":["// refer: https://datatracker.ietf.org/doc/html/draft-pantos-http-live-streaming-08\r\nexport default class EXTM3U {\r\n\tstatic name = \"EXTM3U\";\r\n\tstatic version = \"0.8.8\";\r\n\tstatic about = () => console.log(`\\n🟧 ${this.name} v${this.version}\\n`);\r\n\tstatic #EXTM3URegex = /^(?:(?<TAG>#(?:EXT|AIV)[^#:\\s\\r\\n]+)(?::(?<OPTION>[^\\r\\n]+))?(?:(?:\\r\\n|\\r|\\n)(?<URI>[^#\\s\\r\\n]+))?|(?<NOTE>#[^\\r\\n]+)?)(?:\\r\\n|\\r|\\n)?$/gm;\r\n\tstatic #OPTIONValueRegex = /^((-?\\d+[x.\\d]+)|[0-9A-Z-]+)$/;\r\n\r\n\tstatic parse(m3u8 = new String) {\r\n\t\tlet json = [...m3u8.matchAll(this.#EXTM3URegex)].map(item => {\r\n\t\t\titem = item?.groups || item;\r\n\t\t\tif (/=/.test(item?.OPTION)) item.OPTION = Object.fromEntries(`${item.OPTION}\\,`.split(/,\\s*(?![^\"]*\",)/).slice(0, -1).map(option => {\r\n\t\t\t\toption = option.split(/=(.*)/);\r\n\t\t\t\toption[1] = (isNaN(option[1])) ? option[1].replace(/^\"(.*)\"$/, \"$1\") : parseFloat(option[1]);\r\n\t\t\t\treturn option;\r\n\t\t\t}));\r\n\t\t\treturn item\r\n\t\t});\r\n\t\treturn json;\r\n\t};\r\n\r\n\tstatic stringify(json = new Array, options = { lineBreak: \"\\n\" }) {\r\n\t\tif (json?.[0]?.TAG !== \"#EXTM3U\") json.unshift({ \"TAG\": \"#EXTM3U\" })\r\n\t\tlet m3u8 = json.map(item => {\r\n\t\t\tif (typeof item?.OPTION === \"object\") item.OPTION = Object.entries(item.OPTION).map(option => {\r\n\t\t\t\tif (item?.TAG === \"#EXT-X-SESSION-DATA\") option[1] = `\"${option[1]}\"`;\r\n\t\t\t\telse if (!isNaN(option[1])) option[1] = (typeof option[1] === \"number\") ? option[1] : `\"${option[1]}\"`;\r\n\t\t\t\telse if (option[0] === \"ID\" || option[0] === \"INSTREAM-ID\" || option[0] === \"KEYFORMAT\") option[1] = `\"${option[1]}\"`;\r\n\t\t\t\telse if (!this.#OPTIONValueRegex.test(option[1])) option[1] = `\"${option[1]}\"`;\r\n\t\t\t\treturn option.join(\"=\");\r\n\t\t\t}).join(\",\");\r\n\t\t\treturn item = (item?.URI) ? item.TAG + \":\" + item.OPTION + options.lineBreak + item.URI\r\n\t\t\t\t: (item?.OPTION) ? item.TAG + \":\" + item.OPTION\r\n\t\t\t\t\t: (item?.TAG) ? item.TAG\r\n\t\t\t\t\t\t: (item?.NOTE) ? item.NOTE\r\n\t\t\t\t\t\t\t: \"\";\r\n\t\t}).join(options.lineBreak);\r\n\t\treturn m3u8;\r\n\t};\r\n};\r\n","import { log } from \"../utils/utils.mjs\";\r\nimport setOption from \"../function/setOption.mjs\";\r\nimport aPath from \"../function/aPath.mjs\";\r\n\r\nexport default class AttrList {\r\n    constructor(format = \"application/x-mpegURL\", platform = \"Universal\") {\r\n\t\tthis.Name = \"AttrList\";\r\n\t\tthis.Version = \"1.0.6\";\r\n        this.format = format;\r\n        this.platform = platform;\r\n\t\t//Object.assign(this, options)\r\n\t\tlog(`\\n🟧 ${this.Name} v${this.Version} format: ${this.format} platform: ${this.platform}\\n`)\r\n\t}\r\n\r\n    /**\r\n     * Get Attribute List\r\n     * @author VirgilClyne\r\n     * @param {String} url - Request URL\r\n     * @param {Array} file - Parsed M3U8/JSON\r\n     * @param {String} type - Content Type\r\n     * @param {Array} langCodes - Language Codes Array\r\n     * @return {Array} datas\r\n     */\r\n    get(url = \"\", file = [], type = \"\", langCodes = []) {\r\n        log(`☑️ Get Attribute List, type: ${type}, langCodes: ${langCodes}`);\r\n        let matchList = [];\r\n        // 格式判断\r\n        switch (this.format) {\r\n            case \"application/x-mpegURL\":\r\n            case \"application/x-mpegurl\":\r\n            case \"application/vnd.apple.mpegurl\":\r\n            case \"audio/mpegurl\": {\r\n                let attrList = file\r\n                    .filter(item => item?.TAG === \"#EXT-X-MEDIA\") // 过滤标签\r\n                    .filter(item => item?.OPTION?.TYPE === type) // 过滤类型\r\n                    .filter(item => item?.OPTION?.FORCED !== \"YES\"); // 过滤强制内容\r\n                //log(`🚧 attrList: ${JSON.stringify(attrList)}`, \"\");\r\n                //查询是否有符合语言的内容\r\n                for (let langcode of langCodes) {\r\n                    log(`🚧 Get Attribute List, for (let ${langcode} of langcodes)`, \"\");\r\n                    matchList = attrList.filter(item => item?.OPTION?.LANGUAGE?.toLowerCase() === langcode?.toLowerCase());\r\n                    if (matchList.length !== 0) break;\r\n                };\r\n                matchList = matchList.map(data => {\r\n                    data.URL = aPath(url, data?.OPTION?.URI ?? null);\r\n                    return data;\r\n                });\r\n                break;\r\n            };\r\n            case \"text/json\":\r\n            case \"application/json\": {\r\n                switch (this.platform) {\r\n                    case \"PrimeVideo\": {\r\n                        let attrList = file?.[type] ?? [];\r\n                        //查询是否有符合语言的内容\r\n                        for (let langcode of langCodes) {\r\n                            log(`🚧 Get Attribute List, for (let ${langcode} of langcodes)`, \"\");\r\n                            matchList = attrList.filter(item => item?.languageCode?.toLowerCase() === langcode?.toLowerCase());\r\n                            if (matchList.length !== 0) break;\r\n                        };\r\n                        matchList = matchList.map(data => {\r\n                            data.URL = data.url;\r\n                            return data;\r\n                        });\r\n                        break;\r\n                    };\r\n                };\r\n                break;\r\n            };\r\n        };\r\n        log(`✅ Get Attribute List, matchList: ${JSON.stringify(matchList)}`, \"\");\r\n        return matchList;\r\n    };\r\n\r\n    /**\r\n     * Set Attribute List\r\n     * @author VirgilClyne\r\n     * @param {Array} file - Parsed M3U8/JSON\r\n     * @param {Object} playlists - Playlists\r\n     * @param {Array} types - Types\r\n     * @param {Array} languages - Languages\r\n     * @param {Boolean} Standard - Standard\r\n     * @return {Object} m3u8\r\n     */\r\n    set(file = [], playlists = {}, types = [], languages = [], standard = true, device = \"iPhone\") {\r\n        //types = (standard == true) ? types : [\"Translate\"];\r\n        types = (standard == true) ? types : [types.at(-1)];\r\n        const playlists1 = playlists?.[languages?.[0]];\r\n        const playlists2 = playlists?.[languages?.[1]];\r\n        //if (playlists1?.length !== 0) log(`🚧 Set Attribute List, 有主字幕语言（源语言）字幕`);\r\n        //else types = types.filter(e => e !== \"Translate\"); // 无源语言字幕时删除翻译字幕选项\r\n        //if (playlists2?.length !== 0) log(`🚧 Set Attribute List, 有副字幕语言（目标语言）字幕`);\r\n        //else types = types.filter(e => e !== \"Official\"); // 无目标语言字幕时删除官方字幕选项\r\n        log(`☑️ Set Attribute List, types: ${types}`, \"\");\r\n        // 格式判断\r\n        switch (this.format) {\r\n            case \"application/x-mpegURL\":\r\n            case \"application/x-mpegurl\":\r\n            case \"application/vnd.apple.mpegurl\":\r\n            case \"audio/mpegurl\": {\r\n                playlists1?.forEach(playlist1 => {\r\n                    const index1 = file.findIndex(item => item?.OPTION?.URI === playlist1.OPTION.URI); // 主语言（源语言）字幕位置\r\n                    types.forEach(type => {\r\n                        log(`🚧 Set Attribute List, type: ${type}`, \"\");\r\n                        let option;\r\n                        switch (type) {\r\n                            case \"Official\":\r\n                                playlists2?.forEach(playlist2 => {\r\n                                    //const index2 = file.findIndex(item => item?.OPTION?.URI === playlist2.OPTION.URI); // 副语言（源语言）字幕位置\r\n                                    if (playlist1?.OPTION?.[\"GROUP-ID\"] === playlist2?.OPTION?.[\"GROUP-ID\"]) {\r\n                                        switch (this.platform) { // 兼容性修正\r\n                                            case \"Apple\":\r\n                                                if (playlist1?.OPTION.CHARACTERISTICS == playlist2?.OPTION.CHARACTERISTICS) {  // 只生成属性相同\r\n                                                    option = setOption(playlist1, playlist2, type, this.platform, standard, device);\r\n                                                    // option.OPTION.URI += `&lang=${languages[0]}`;\r\n                                                };\r\n                                                break;\r\n                                            default:\r\n                                                option = setOption(playlist1, playlist2, type, this.platform, standard, device);\r\n                                                // option.OPTION.URI += `&lang=${languages[0]}`;\r\n                                                break;\r\n                                        };\r\n                                    };\r\n                                });\r\n                                break;\r\n                            case \"Translate\":\r\n                            case \"External\":\r\n                                const playlist2 = {\r\n                                    \"OPTION\": {\r\n                                        \"TYPE\": \"SUBTITLES\",\r\n                                        //\"GROUP-ID\": playlist?.OPTION?.[\"GROUP-ID\"],\r\n                                        \"NAME\": playlists2?.[0]?.OPTION?.NAME ?? languages[1].toLowerCase(),\r\n                                        \"LANGUAGE\": playlists2?.[0]?.OPTION?.LANGUAGE ?? languages[1].toLowerCase(),\r\n                                        //\"URI\": playlist?.URI,\r\n                                    }\r\n                                };\r\n                                option = setOption(playlist1, playlist2, type, this.platform, standard, device);\r\n                                option.OPTION.URI += `&lang=${playlist1?.OPTION?.LANGUAGE?.toUpperCase()}`;\r\n                                break;\r\n                        };\r\n                        if (option) file.splice(index1 + (standard ? 1 : 0), 0, option);\r\n                    });\r\n                });\r\n                break;\r\n            };\r\n            case \"text/json\":\r\n            case \"application/json\": {\r\n                switch (this.platform) {\r\n                    case \"PrimeVideo\": {\r\n                        playlists1?.forEach(playlist1 => {\r\n                            const index1 = file.findIndex(item => item?.timedTextTrackId === playlist1.timedTextTrackId); // 主语言（源语言）字幕位置\r\n                            types.forEach(type => {\r\n                                log(`🚧 Set Attribute List, type: ${type}`);\r\n                                let option;\r\n                                switch (type) {\r\n                                    case \"Official\":\r\n                                        playlists2?.forEach(playlist2 => {\r\n                                            if (playlist1.trackGroupId === playlist2.trackGroupId) {\r\n                                                option = JSON.parse(JSON.stringify(playlist1));\r\n                                                option.displayName = `${type} (${playlist1.displayName}/${playlist2.displayName})`;\r\n                                                option.languageCode = `${playlist1.languageCode}/${playlist2.languageCode}_${type}`\r\n                                                option.timedTextTrackId = `${playlist1.timedTextTrackId}_${type}`;\r\n                                                const symbol = (option.url.includes(\"?\")) ? \"&\" : \"?\";\r\n                                                option.url += `${symbol}subtype=${type}`;\r\n                                                option.url += `&lang=${languages[0]}`;\r\n                                                //log(`🚧 option: ${JSON.stringify(option)}`, \"\");\r\n                                            };\r\n                                        });\r\n                                        break;\r\n                                    case \"Translate\":\r\n                                    case \"External\":\r\n                                        option = JSON.parse(JSON.stringify(playlist1));\r\n                                        option.displayName = `${type} (${playlist1.displayName}/${languages[1]})`;\r\n                                        option.languageCode = `${playlist1.languageCode}/${languages[1].toLowerCase()}_${type}`\r\n                                        option.timedTextTrackId = `${playlist1.timedTextTrackId}_${type}`;\r\n                                        const symbol = (playlist1.url.includes(\"?\")) ? \"&\" : \"?\";\r\n                                        option.url += `${symbol}subtype=${type}`;\r\n                                        option.url += `&lang=${playlist1.languageCode.toUpperCase()}`;\r\n                                        //log(`🚧 option: ${JSON.stringify(option)}`, \"\");\r\n                                        break;\r\n                                };\r\n                                if (option) file.splice(index1 + (standard ? 1 : 0), 0, option);\r\n                            });\r\n                        });\r\n                        break;\r\n                    };\r\n                };\r\n                break;\r\n            };\r\n        };\r\n        //log(`✅ Set Attribute List, file: ${JSON.stringify(file)}`);\r\n        log(`✅ Set Attribute List`);\r\n        return file;\r\n    };\r\n}\r\n","import Default from \"./Default.json\" with { type: \"json\" };\r\nimport Universal from \"./Universal.json\" with { type: \"json\" };\r\nimport YouTube from \"./YouTube.json\" with { type: \"json\" };\r\nimport Netflix from \"./Netflix.json\" with { type: \"json\" };\r\nimport Spotify from \"./Spotify.json\" with { type: \"json\" };\r\nimport Composite from \"./Composite.json\" with { type: \"json\" };\r\nimport Translate from \"./Translate.json\" with { type: \"json\" };\r\nimport External from \"./External.json\" with { type: \"json\" };\r\nimport API from \"./API.json\" with { type: \"json\" };\r\n\r\nexport default {\r\n\tDefault,\r\n\tUniversal,\r\n\tYouTube,\r\n\tNetflix,\r\n\tSpotify,\r\n\tComposite,\r\n\tTranslate,\r\n\tExternal,\r\n\tAPI,\r\n};\r\n","// Get Absolute Path\r\nexport default function aPath(aURL = \"\", URL = \"\") { return (/^https?:\\/\\//i.test(URL)) ? URL : aURL.match(/^(https?:\\/\\/(?:[^?]+)\\/)/i)?.[0] + URL };\r\n","import { log } from \"../utils/utils.mjs\";\r\n\r\nexport default function detectPlatform(url) {\r\n\tlog(`☑️ Detect Platform`, \"\");\r\n\t/***************** Platform *****************/\r\n\tlet Platform = /\\.(netflix\\.com|nflxvideo\\.net)/i.test(url) ? \"Netflix\"\r\n\t\t: /(\\.youtube|youtubei\\.googleapis)\\.com/i.test(url) ? \"YouTube\"\r\n\t\t\t: /\\.spotify(cdn)?\\.com/i.test(url) ? \"Spotify\"\r\n\t\t\t\t: /\\.apple\\.com/i.test(url) ? \"Apple\"\r\n\t\t\t\t\t: /\\.(dssott|starott)\\.com/i.test(url) ? \"Disney+\"\r\n\t\t\t\t\t\t: /primevideo\\.com|(\\.(pv-cdn|aiv-cdn|akamaihd|cloudfront)\\.net)|s3\\.amazonaws\\.com\\/aiv-prod-timedtext\\//i.test(url) ? \"PrimeVideo\"\r\n\t\t\t\t\t\t\t: /prd\\.media\\.h264\\.io/i.test(url) ? \"Max\"\r\n\t\t\t\t\t\t\t\t: /\\.(api\\.hbo|hbomaxcdn)\\.com/i.test(url) ? \"HBOMax\"\r\n\t\t\t\t\t\t\t\t\t: /\\.hulu(stream|im)?\\.com/i.test(url) ? \"Hulu\"\r\n\t\t\t\t\t\t\t\t\t\t: /\\.(pplus\\.paramount\\.tech|cbs(aavideo|cbsivideo)?\\.com)/i.test(url) ? \"Paramount+\"\r\n\t\t\t\t\t\t\t\t\t\t\t: /\\.uplynk\\.com/i.test(url) ? \"Discovery+\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t: /dplus-ph-/i.test(url) ? \"Discovery+Ph\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t: /\\.peacocktv\\.com/i.test(url) ? \"PeacockTV\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t: /\\.fubo\\.tv/i.test(url) ? \"FuboTV\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: /\\.viki\\.io/i.test(url) ? \"Viki\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: /epix(hls\\.akamaized\\.net|\\.services\\.io)/i.test(url) ? \"MGM+\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: /\\.nebula\\.app/i.test(url) ? \"Nebula\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: /\\.pluto(\\.tv|tv\\.net)/i.test(url) ? \"PlutoTV\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: /\\.mubicdn\\.net/i.test(url) ? \"MUBI\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: \"Universal\";\r\n    log(`✅ Detect Platform, Platform: ${Platform}`, \"\");\r\n\treturn Platform;\r\n};\r\n","import { log } from \"../utils/utils.mjs\";\r\n\r\n/**\r\n * detect Format\r\n * @author VirgilClyne\r\n * @param {Object} m3u8 - Parsed M3U8\r\n * @return {String} type - type\r\n */\r\nexport default function detectPlaylist(m3u8 = {}) {\r\n\tlog(`☑️ detectPlaylist`, \"\");\r\n\tlet type = undefined;\r\n\tm3u8.forEach(item => {\r\n\t\tswitch (item.TAG) {\r\n\t\t\tcase \"#EXT-X-MEDIA\":\r\n\t\t\tcase \"#EXT-X-STREAM-INF\":\r\n\t\t\t\ttype = \"Multivariant Playlist\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"#EXT-X-PLAYLIST-TYPE\":\r\n\t\t\tcase \"EXT-X-TARGETDURATION\":\r\n\t\t\tcase \"#EXTINF\":\r\n\t\t\t\ttype = \"Media Playlist\";\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t};\r\n\t});\r\n\tlog(`✅ detectPlaylist, type: ${type}`, \"\");\r\n\treturn type;\r\n};\r\n","\r\nimport { log } from \"../utils/utils.mjs\";\r\n\r\n/**\r\n * is Standard?\r\n * Determine whether Standard Media Player\r\n * @author VirgilClyne\r\n * @param {String} url - Parsed Request URL\r\n * @param {Object} headers - Request Headers\r\n * @param {String} platform - Steaming Media Platform\r\n * @return {Promise<*>}\r\n */\r\nexport default function isStandard(url = new URL(), headers = {}, platform = \"Universal\") {\r\n\tlog(`☑️ is Standard?`, \"\");\r\n    // 判断设备类型\r\n\tconst UA = headers[\"user-agent\"] ?? headers[\"User-Agent\"];\r\n\tlog(`🚧 is Standard?, UA: ${UA}`, \"\");\r\n    let device = UA.includes(\"Mozilla/5.0\") ? \"Web\"\r\n        : UA.includes(\"iPhone\") ? \"iPhone\"\r\n            : UA.includes(\"iPad\") ? \"iPad\"\r\n                : UA.includes(\"Macintosh\") ? \"Macintosh\"\r\n                    : UA.includes(\"AppleTV\") ? \"AppleTV\"\r\n                        : UA.includes(\"Apple TV\") ? \"AppleTV\"\r\n                            : \"iPhone\";\r\n    switch (platform) {\r\n        case \"Max\":\r\n        case \"HBOMax\":\r\n            if (headers[\"x-hbo-device-name\"]?.includes(\"ios\")) device = \"iPhone\";\r\n            else if (url.searchParams.get(\"device-code\") === \"iphone\") device = \"iPhone\";\r\n            break;\r\n        case \"PeacockTV\":\r\n            if (UA.includes(\"PeacockMobile\")) device = \"iPhone\";\r\n            break;\r\n    };\r\n    // 判断是否标准播放器\r\n    let standard = true;\r\n    switch (device) {\r\n        case \"iPhone\":\r\n        case \"iPad\":\r\n        case \"Macintosh\":\r\n            switch (platform) {\r\n                case \"Max\":\r\n                case \"HBOMax\":\r\n                case \"Viki\":\r\n                case \"PeacockTV\":\r\n                case \"FuboTV\":\r\n                case \"MUBI\":\r\n                    standard = false;\r\n                    break;\r\n                case \"TED\":\r\n                default:\r\n                    standard = true;\r\n                    break;\r\n            };\r\n            break;\r\n        case \"Web\":\r\n            switch (platform) {\r\n                case \"Max\":\r\n                case \"HBOMax\":\r\n                case \"FuboTV\":\r\n                case \"TED\":\r\n                case \"MUBI\":\r\n                    standard = false;\r\n                    break;\r\n                case \"Viki\":\r\n                case \"PeacockTV\":\r\n                default:\r\n                    standard = true;\r\n                    break;\r\n            };\r\n            break;\r\n        case \"AppleTV\":\r\n        default:\r\n            standard = true;\r\n            break;\r\n    };\r\n\tlog(`✅ is Standard?, standard: ${standard}, device: ${device}`, \"\");\r\n\treturn {standard, device};\r\n};\r\n","import { log } from \"../utils/utils.mjs\";\r\n\r\n/**\r\n * Set Cache\r\n * @author VirgilClyne\r\n * @param {Map} cache - Playlists Cache / Subtitles Cache\r\n * @param {Number} cacheSize - Cache Size\r\n * @return {Boolean} isSaved\r\n */\r\nexport default function setCache(cache, cacheSize = 100) {\r\n\tlog(`☑️ Set Cache, cacheSize: ${cacheSize}`, \"\");\r\n\tcache = Array.from(cache || []); // Map转Array\r\n\tcache = cache.slice(-cacheSize); // 限制缓存大小\r\n\tlog(`✅ Set Cache`, \"\");\r\n\treturn cache;\r\n};\r\n","import getStorage from '../utils/getStorage.mjs'\r\nimport { _, log } from \"../utils/utils.mjs\";\r\n\r\n/**\r\n * Set Environment Variables\r\n * @author VirgilClyne\r\n * @param {String} name - Persistent Store Key\r\n * @param {Array} platforms - Platform Names\r\n * @param {Object} database - Default DataBase\r\n * @return {Object} { Settings, Caches, Configs }\r\n */\r\nexport default function setENV(name, platforms, database) {\r\n\tlog(`☑️ Set Environment Variables`, \"\");\r\n\tlet { Settings, Caches, Configs } = getStorage(name, platforms, database);\r\n\t/***************** Settings *****************/\r\n\tif (!Array.isArray(Settings?.Types)) Settings.Types = (Settings.Types) ? [Settings.Types] : []; // 只有一个选项时，无逗号分隔\r\n\tlog(`✅ Set Environment Variables, Settings: ${typeof Settings}, Settings内容: ${JSON.stringify(Settings)}`, \"\");\r\n\t/***************** Caches *****************/\r\n\t//log(`✅ Set Environment Variables, Caches: ${typeof Caches}, Caches内容: ${JSON.stringify(Caches)}`, \"\");\r\n\tif (typeof Caches?.Playlists !== \"object\" || Array.isArray(Caches?.Playlists)) Caches.Playlists = {}; // 创建Playlists缓存\r\n\tCaches.Playlists.Master = new Map(JSON.parse(Caches?.Playlists?.Master || \"[]\")); // Strings转Array转Map\r\n\tCaches.Playlists.Subtitle = new Map(JSON.parse(Caches?.Playlists?.Subtitle || \"[]\")); // Strings转Array转Map\r\n\tif (typeof Caches?.Subtitles !== \"object\") Caches.Subtitles = new Map(JSON.parse(Caches?.Subtitles || \"[]\")); // Strings转Array转Map\r\n\tif (typeof Caches?.Metadatas !== \"object\" || Array.isArray(Caches?.Metadatas)) Caches.Metadatas = {}; // 创建Playlists缓存\r\n\tif (typeof Caches?.Metadatas?.Tracks !== \"object\") Caches.Metadatas.Tracks = new Map(JSON.parse(Caches?.Metadatas?.Tracks || \"[]\")); // Strings转Array转Map\r\n\t/***************** Configs *****************/\r\n\treturn { Settings, Caches, Configs };\r\n};\r\n","import { log } from \"../utils/utils.mjs\";\r\n\r\n/**\r\n * Set DualSubs Subtitle Options\r\n * @author VirgilClyne\r\n * @param {String} platform - platform\r\n * @param {Array} playlist1 - Subtitles Playlist (Languages 0)\r\n * @param {Array} playlist2 - Subtitles Playlist (Languages 1)\r\n * @param {Array} enabledTypes - Enabled Types\r\n * @param {Array} translateTypes - Translate Types\r\n * @param {String} Standard - Standard\r\n * @param {String} device - Device\r\n * @return {Promise<*>}\r\n */\r\nexport default function setOption(playlist1 = {}, playlist2 = {}, type = \"\", platform = \"\", standard = true, device = \"iPhone\") {\r\n\tlog(`☑️ Set DualSubs Subtitle Option, type: ${type}`, \"\");\r\n\tconst NAME1 = playlist1?.OPTION?.NAME.trim(), NAME2 = playlist2?.OPTION?.NAME.trim();\r\n\tconst LANGUAGE1 = playlist1?.OPTION?.LANGUAGE.trim(), LANGUAGE2 = playlist2?.OPTION?.LANGUAGE.trim();\r\n\t// 复制此语言选项\r\n\tlet newOption = JSON.parse(JSON.stringify(playlist1));\r\n\t// 修改名称\r\n\tswitch (type) {\r\n\t\tcase \"Official\":\r\n\t\t\tnewOption.OPTION.NAME = `官方字幕 (${NAME1}/${NAME2})`;\r\n\t\t\tbreak;\r\n\t\tcase \"Translate\":\r\n\t\t\tnewOption.OPTION.NAME = `翻译字幕 (${NAME1}/${NAME2})`;\r\n\t\t\tbreak;\r\n\t\tcase \"External\":\r\n\t\t\tnewOption.OPTION.NAME = `外挂字幕 (${NAME1})`;\r\n\t\t\tbreak;\r\n\t};\r\n\t// 修改语言代码\r\n\tswitch (platform) {\r\n\t\tcase \"Apple\": // AVKit 语言列表名称显示为LANGUAGE字符串 自动映射LANGUAGE为本地语言NAME 不按LANGUAGE区分语言\r\n\t\tcase \"MGM+\": // AVKit 语言列表名称显示为LANGUAGE字符串 自动映射LANGUAGE为本地语言NAME\r\n\t\t\tswitch (device) {\r\n\t\t\t\tcase \"Web\":\r\n\t\t\t\tcase \"Macintosh\":\r\n\t\t\t\t\tnewOption.OPTION.LANGUAGE = LANGUAGE1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\t//newOption.OPTION.LANGUAGE = `${NAME1}/${NAME2} [${type}]`;\r\n\t\t\t\t\tnewOption.OPTION.LANGUAGE = `${type} (${LANGUAGE1}/${LANGUAGE2})`;\r\n\t\t\t\t\tbreak;\r\n\t\t\t};\r\n\t\t\tbreak;\r\n\t\tcase \"Disney+\": // AppleCoreMedia 语言列表名称显示为NAME字符串 自动映射NAME为本地语言NAME 按LANGUAGE区分语言\r\n\t\tcase \"PrimeVideo\": // AppleCoreMedia 语言列表名称显示为NAME字符串 按LANGUAGE区分语言\r\n\t\tcase \"Hulu\": // AppleCoreMedia 语言列表名称显示为LANGUAGE字符串 自动映射LANGUAGE为本地语言NAME 空格分割\r\n\t\tcase \"Nebula\":  // AppleCoreMedia 语言列表名称显示为LANGUAGE字符串 自动映射LANGUAGE为本地语言NAME\r\n\t\tcase \"PlutoTV\": // AppleCoreMedia 语言列表名称显示为NAME字符串 按LANGUAGE区分语言\r\n\t\t\tnewOption.OPTION.LANGUAGE = `${type} (${LANGUAGE1}/${LANGUAGE2})`;\r\n\t\t\tbreak;\r\n\t\tcase \"Max\": // AppleCoreMedia\r\n\t\tcase \"HBOMax\": // AppleCoreMedia\r\n\t\tcase \"Viki\":\r\n\t\t\t//if (!standard) newOption.OPTION.NAME = NAME1;\r\n\t\t\tnewOption.OPTION.LANGUAGE = LANGUAGE1;\r\n\t\t\t//if (!standard) delete newOption.OPTION[\"ASSOC-LANGUAGE\"];\r\n\t\t\tbreak;\r\n\t\tcase \"Paramount+\":\r\n\t\tcase \"Discovery+Ph\":\r\n\t\t\t//newOption.OPTION.NAME = `${NAME1} / ${NAME2} [${type}]`;\r\n\t\t\tnewOption.OPTION.LANGUAGE = `${type} (${LANGUAGE1}/${LANGUAGE2})`;\r\n\t\t\t//newOption.OPTION[\"ASSOC-LANGUAGE\"] = `${LANGUAGE2} [${type}]`;\r\n\t\t\tbreak;\r\n        case \"MUBI\":\r\n            newOption.OPTION.LANGUAGE = `${type} (${LANGUAGE1}/${LANGUAGE2})`;\r\n            if (!standard) newOption.OPTION.NAME = NAME1;\r\n            break;\r\n\t\tdefault:\r\n\t\t\tnewOption.OPTION.LANGUAGE = LANGUAGE1;\r\n\t\t\tbreak;\r\n\t};\r\n\t// 增加/修改类型参数\r\n\t//const separator = (newOption?.OPTION?.CHARACTERISTICS) ? \",\" : \"\";\r\n\t//newOption.OPTION.CHARACTERISTICS += `${separator ?? \"\"}DualSubs.${type}`;\r\n\t// 增加副语言\r\n\tnewOption.OPTION[\"ASSOC-LANGUAGE\"] = LANGUAGE2;\r\n\t// 修改链接\r\n\tconst symbol = (newOption.OPTION.URI.includes(\"?\")) ? \"&\" : \"?\";\r\n\tnewOption.OPTION.URI += `${symbol}subtype=${type}`;\r\n\t//if (!standard) newOption.OPTION.URI += `&lang=${LANGUAGE1}`;\r\n\t// 自动选择\r\n\tnewOption.OPTION.AUTOSELECT = \"YES\";\r\n\t// 兼容性修正\r\n\tif (!standard) newOption.OPTION.DEFAULT = \"YES\";\r\n\tlog(`✅ Set DualSubs Subtitle Option, newOption: ${JSON.stringify(newOption)}`, \"\");\r\n\treturn newOption;\r\n};\r\n","/* https://www.lodashjs.com */\r\nexport default class Lodash {\r\n\tstatic name = \"Lodash\";\r\n\tstatic version = \"1.2.2\";\r\n\tstatic about() { return console.log(`\\n🟧 ${this.name} v${this.version}\\n`) };\r\n\r\n\tstatic get(object = {}, path = \"\", defaultValue = undefined) {\r\n\t\t// translate array case to dot case, then split with .\r\n\t\t// a[0].b -> a.0.b -> ['a', '0', 'b']\r\n\t\tif (!Array.isArray(path)) path = this.toPath(path)\r\n\r\n\t\tconst result = path.reduce((previousValue, currentValue) => {\r\n\t\t\treturn Object(previousValue)[currentValue]; // null undefined get attribute will throwError, Object() can return a object \r\n\t\t}, object)\r\n\t\treturn (result === undefined) ? defaultValue : result;\r\n\t}\r\n\r\n\tstatic set(object = {}, path = \"\", value) {\r\n\t\tif (!Array.isArray(path)) path = this.toPath(path)\r\n\t\tpath\r\n\t\t\t.slice(0, -1)\r\n\t\t\t.reduce(\r\n\t\t\t\t(previousValue, currentValue, currentIndex) =>\r\n\t\t\t\t\t(Object(previousValue[currentValue]) === previousValue[currentValue])\r\n\t\t\t\t\t\t? previousValue[currentValue]\r\n\t\t\t\t\t\t: previousValue[currentValue] = (/^\\d+$/.test(path[currentIndex + 1]) ? [] : {}),\r\n\t\t\t\tobject\r\n\t\t\t)[path[path.length - 1]] = value\r\n\t\treturn object\r\n\t}\r\n\r\n\tstatic unset(object = {}, path = \"\") {\r\n\t\tif (!Array.isArray(path)) path = this.toPath(path)\r\n\t\tlet result = path.reduce((previousValue, currentValue, currentIndex) => {\r\n\t\t\tif (currentIndex === path.length - 1) {\r\n\t\t\t\tdelete previousValue[currentValue]\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t\treturn Object(previousValue)[currentValue]\r\n\t\t}, object)\r\n\t\treturn result\r\n\t}\r\n\r\n\tstatic toPath(value) {\r\n\t\treturn value.replace(/\\[(\\d+)\\]/g, '.$1').split('.').filter(Boolean);\r\n\t}\r\n\r\n\tstatic escape(string) {\r\n\t\tconst map = {\r\n\t\t\t'&': '&amp;',\r\n\t\t\t'<': '&lt;',\r\n\t\t\t'>': '&gt;',\r\n\t\t\t'\"': '&quot;',\r\n\t\t\t\"'\": '&#39;',\r\n\t\t}\r\n\t\treturn string.replace(/[&<>\"']/g, m => map[m])\r\n\t};\r\n\r\n\tstatic unescape(string) {\r\n\t\tconst map = {\r\n\t\t\t'&amp;': '&',\r\n\t\t\t'&lt;': '<',\r\n\t\t\t'&gt;': '>',\r\n\t\t\t'&quot;': '\"',\r\n\t\t\t'&#39;': \"'\",\r\n\t\t}\r\n\t\treturn string.replace(/&amp;|&lt;|&gt;|&quot;|&#39;/g, m => map[m])\r\n\t}\r\n\r\n}\r\n","import { $platform, _, log } from \"./utils.mjs\";\r\n/* https://developer.mozilla.org/zh-CN/docs/Web/API/Storage/setItem */\r\nexport default class Storage {\r\n\tstatic name = \"Storage\";\r\n\tstatic version = \"1.1.0\";\r\n\tstatic about () { return log(\"\", `🟧 ${this.name} v${this.version}`, \"\") };\r\n\tstatic data = null;\r\n\tstatic dataFile = 'box.dat';\r\n\tstatic #nameRegex = /^@(?<key>[^.]+)(?:\\.(?<path>.*))?$/;\r\n\r\n    static getItem(keyName = new String, defaultValue = null) {\r\n        let keyValue = defaultValue;\r\n        // 如果以 @\r\n\t\tswitch (keyName.startsWith('@')) {\r\n\t\t\tcase true:\r\n\t\t\t\tconst { key, path } = keyName.match(this.#nameRegex)?.groups;\r\n\t\t\t\t//log(`1: ${key}, ${path}`);\r\n\t\t\t\tkeyName = key;\r\n\t\t\t\tlet value = this.getItem(keyName, {});\r\n\t\t\t\t//log(`2: ${JSON.stringify(value)}`)\r\n\t\t\t\tif (typeof value !== \"object\") value = {};\r\n\t\t\t\t//log(`3: ${JSON.stringify(value)}`)\r\n\t\t\t\tkeyValue = _.get(value, path);\r\n\t\t\t\t//log(`4: ${JSON.stringify(keyValue)}`)\r\n\t\t\t\ttry {\r\n\t\t\t\t\tkeyValue = JSON.parse(keyValue);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\t// do nothing\r\n\t\t\t\t};\r\n\t\t\t\t//log(`5: ${JSON.stringify(keyValue)}`)\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tswitch ($platform) {\r\n\t\t\t\t\tcase 'Surge':\r\n\t\t\t\t\tcase 'Loon':\r\n\t\t\t\t\tcase 'Stash':\r\n\t\t\t\t\tcase 'Egern':\r\n\t\t\t\t\tcase 'Shadowrocket':\r\n\t\t\t\t\t\tkeyValue = $persistentStore.read(keyName);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'Quantumult X':\r\n\t\t\t\t\t\tkeyValue = $prefs.valueForKey(keyName);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'Node.js':\r\n\t\t\t\t\t\tthis.data = this.#loaddata(this.dataFile);\r\n\t\t\t\t\t\tkeyValue = this.data?.[keyName];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tkeyValue = this.data?.[keyName] || null;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t};\r\n\t\t\t\ttry {\r\n\t\t\t\t\tkeyValue = JSON.parse(keyValue);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\t// do nothing\r\n\t\t\t\t};\r\n\t\t\t\tbreak;\r\n\t\t};\r\n\t\treturn keyValue ?? defaultValue;\r\n    };\r\n\r\n\tstatic setItem(keyName = new String, keyValue = new String) {\r\n\t\tlet result = false;\r\n\t\t//log(`0: ${typeof keyValue}`);\r\n\t\tswitch (typeof keyValue) {\r\n\t\t\tcase \"object\":\r\n\t\t\t\tkeyValue = JSON.stringify(keyValue);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tkeyValue = String(keyValue);\r\n\t\t\t\tbreak;\r\n\t\t};\r\n\t\tswitch (keyName.startsWith('@')) {\r\n\t\t\tcase true:\r\n\t\t\t\tconst { key, path } = keyName.match(this.#nameRegex)?.groups;\r\n\t\t\t\t//log(`1: ${key}, ${path}`);\r\n\t\t\t\tkeyName = key;\r\n\t\t\t\tlet value = this.getItem(keyName, {});\r\n\t\t\t\t//log(`2: ${JSON.stringify(value)}`)\r\n\t\t\t\tif (typeof value !== \"object\") value = {};\r\n\t\t\t\t//log(`3: ${JSON.stringify(value)}`)\r\n\t\t\t\t_.set(value, path, keyValue);\r\n\t\t\t\t//log(`4: ${JSON.stringify(value)}`)\r\n\t\t\t\tresult = this.setItem(keyName, value);\r\n\t\t\t\t//log(`5: ${result}`)\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tswitch ($platform) {\r\n\t\t\t\t\tcase 'Surge':\r\n\t\t\t\t\tcase 'Loon':\r\n\t\t\t\t\tcase 'Stash':\r\n\t\t\t\t\tcase 'Egern':\r\n\t\t\t\t\tcase 'Shadowrocket':\r\n\t\t\t\t\t\tresult = $persistentStore.write(keyValue, keyName);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'Quantumult X':\r\n\t\t\t\t\t\tresult =$prefs.setValueForKey(keyValue, keyName);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'Node.js':\r\n\t\t\t\t\t\tthis.data = this.#loaddata(this.dataFile)\r\n\t\t\t\t\t\tthis.data[keyName] = keyValue\r\n\t\t\t\t\t\tthis.#writedata(this.dataFile)\r\n\t\t\t\t\t\tresult = true\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tresult = this.data?.[keyName] || null\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t};\r\n\t\t\t\tbreak;\r\n\t\t};\r\n\t\treturn result;\r\n\t};\r\n\r\n    static removeItem(keyName){\r\n\t\tlet result = false;\r\n\t\tswitch (keyName.startsWith('@')) {\r\n\t\t\tcase true:\r\n\t\t\t\tconst { key, path } = keyName.match(this.#nameRegex)?.groups;\r\n\t\t\t\tkeyName = key;\r\n\t\t\t\tlet value = this.getItem(keyName);\r\n\t\t\t\tif (typeof value !== \"object\") value = {};\r\n\t\t\t\tkeyValue = _.unset(value, path);\r\n\t\t\t\tresult = this.setItem(keyName, value);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tswitch ($platform) {\r\n\t\t\t\t\tcase 'Surge':\r\n\t\t\t\t\tcase 'Loon':\r\n\t\t\t\t\tcase 'Stash':\r\n\t\t\t\t\tcase 'Egern':\r\n\t\t\t\t\tcase 'Shadowrocket':\r\n\t\t\t\t\t\tresult = false;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'Quantumult X':\r\n\t\t\t\t\t\tresult = $prefs.removeValueForKey(keyName);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'Node.js':\r\n\t\t\t\t\t\tresult = false\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tresult = false;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t};\r\n\t\t\t\tbreak;\r\n\t\t};\r\n\t\treturn result;\r\n    }\r\n\r\n    static clear() {\r\n\t\tlet result = false;\r\n\t\tswitch ($platform) {\r\n\t\t\tcase 'Surge':\r\n\t\t\tcase 'Loon':\r\n\t\t\tcase 'Stash':\r\n\t\t\tcase 'Egern':\r\n\t\t\tcase 'Shadowrocket':\r\n\t\t\t\tresult = false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'Quantumult X':\r\n\t\t\t\tresult = $prefs.removeAllValues();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'Node.js':\r\n\t\t\t\tresult = false\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tresult = false;\r\n\t\t\t\tbreak;\r\n\t\t};\r\n\t\treturn result;\r\n    }\r\n\r\n\tstatic #loaddata(dataFile) {\r\n\t\tif (this.isNode()) {\r\n\t\t\tthis.fs = this.fs ? this.fs : require('fs')\r\n\t\t\tthis.path = this.path ? this.path : require('path')\r\n\t\t\tconst curDirDataFilePath = this.path.resolve(dataFile)\r\n\t\t\tconst rootDirDataFilePath = this.path.resolve(\r\n\t\t\t\tprocess.cwd(),\r\n\t\t\t\tdataFile\r\n\t\t\t)\r\n\t\t\tconst isCurDirDataFile = this.fs.existsSync(curDirDataFilePath)\r\n\t\t\tconst isRootDirDataFile =\r\n\t\t\t\t!isCurDirDataFile && this.fs.existsSync(rootDirDataFilePath)\r\n\t\t\tif (isCurDirDataFile || isRootDirDataFile) {\r\n\t\t\t\tconst datPath = isCurDirDataFile\r\n\t\t\t\t\t? curDirDataFilePath\r\n\t\t\t\t\t: rootDirDataFilePath\r\n\t\t\t\ttry {\r\n\t\t\t\t\treturn JSON.parse(this.fs.readFileSync(datPath))\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\treturn {}\r\n\t\t\t\t}\r\n\t\t\t} else return {}\r\n\t\t} else return {}\r\n\t}\r\n\r\n\tstatic #writedata(dataFile = this.dataFile) {\r\n\t\tif (this.isNode()) {\r\n\t\t\tthis.fs = this.fs ? this.fs : require('fs')\r\n\t\t\tthis.path = this.path ? this.path : require('path')\r\n\t\t\tconst curDirDataFilePath = this.path.resolve(dataFile)\r\n\t\t\tconst rootDirDataFilePath = this.path.resolve(\r\n\t\t\t\tprocess.cwd(),\r\n\t\t\t\tdataFile\r\n\t\t\t)\r\n\t\t\tconst isCurDirDataFile = this.fs.existsSync(curDirDataFilePath)\r\n\t\t\tconst isRootDirDataFile =\r\n\t\t\t\t!isCurDirDataFile && this.fs.existsSync(rootDirDataFilePath)\r\n\t\t\tconst jsondata = JSON.stringify(this.data)\r\n\t\t\tif (isCurDirDataFile) {\r\n\t\t\t\tthis.fs.writeFileSync(curDirDataFilePath, jsondata)\r\n\t\t\t} else if (isRootDirDataFile) {\r\n\t\t\t\tthis.fs.writeFileSync(rootDirDataFilePath, jsondata)\r\n\t\t\t} else {\r\n\t\t\t\tthis.fs.writeFileSync(curDirDataFilePath, jsondata)\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n}\r\n","export default class URL {\r\n\tconstructor(url, base = undefined) {\r\n\t\tconst name = \"URL\";\r\n\t\tconst version = \"2.1.2\";\r\n\t\tconsole.log(`\\n🟧 ${name} v${version}\\n`);\r\n\t\turl = this.#parse(url, base);\r\n\t\treturn this;\r\n\t};\r\n\r\n\t#parse(url, base = undefined) {\r\n\t\tconst URLRegex = /(?:(?<protocol>\\w+:)\\/\\/(?:(?<username>[^\\s:\"]+)(?::(?<password>[^\\s:\"]+))?@)?(?<host>[^\\s@/]+))?(?<pathname>\\/?[^\\s@?]+)?(?<search>\\?[^\\s?]+)?/\r\n\t\tconst PortRegex = /(?<hostname>.+):(?<port>\\d+)$/;\r\n\t\turl = url.match(URLRegex)?.groups || {};\r\n\t\tif (base) {\r\n\t\t\tbase = base?.match(URLRegex)?.groups || {};\r\n\t\t\tif (!base.protocol || !base.hostname) throw new Error(`🚨 ${name}, ${base} is not a valid URL`);\r\n\t\t};\r\n\t\tif (url.protocol || base?.protocol) this.protocol = url.protocol || base.protocol;\r\n\t\tif (url.username || base?.username) this.username = url.username || base.username;\r\n\t\tif (url.password || base?.password) this.password = url.password || base.password;\r\n\t\tif (url.host || base?.host) {\r\n\t\t\tthis.host = url.host || base.host;\r\n\t\t\tObject.freeze(this.host);\r\n\t\t\tthis.hostname = this.host.match(PortRegex)?.groups.hostname ?? this.host;\r\n\t\t\tthis.port = this.host.match(PortRegex)?.groups.port ?? \"\";\r\n\t\t};\r\n\t\tif (url.pathname || base?.pathname) {\r\n\t\t\tthis.pathname = url.pathname || base?.pathname;\r\n\t\t\tif (!this.pathname.startsWith(\"/\")) this.pathname = \"/\" + this.pathname;\r\n\t\t\tthis.paths = this.pathname.split(\"/\").filter(Boolean);\r\n\t\t\tObject.freeze(this.paths);\r\n\t\t\tif (this.paths) {\r\n\t\t\t\tconst fileName = this.paths[this.paths.length - 1];\r\n\t\t\t\tif (fileName?.includes(\".\")) {\r\n\t\t\t\t\tconst list = fileName.split(\".\");\r\n\t\t\t\t\tthis.format = list[list.length - 1];\r\n\t\t\t\t\tObject.freeze(this.format);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t} else this.pathname = \"\";\r\n\t\tif (url.search || base?.search) {\r\n\t\t\tthis.search = url.search || base.search;\r\n\t\t\tObject.freeze(this.search);\r\n\t\t\tif (this.search) this.searchParams = this.search.slice(1).split(\"&\").map((param) => param.split(\"=\"));\r\n\t\t};\r\n\t\tthis.searchParams = new Map(this.searchParams || []);\r\n\t\tthis.harf = this.toString();\r\n\t\tObject.freeze(this.harf);\r\n\t\treturn this;\r\n\t};\r\n\r\n\ttoString() {\r\n\t\tlet string = \"\";\r\n\t\tif (this.protocol) string += this.protocol + \"//\";\r\n\t\tif (this.username) string += this.username + (this.password ? \":\" + this.password : \"\") + \"@\";\r\n\t\tif (this.hostname) string += this.hostname;\r\n\t\tif (this.port) string += \":\" + this.port;\r\n\t\tif (this.pathname) string += this.pathname;\r\n\t\tif (this.searchParams.size !== 0) string += \"?\" + Array.from(this.searchParams).map(param => param.join(\"=\")).join(\"&\");\r\n\t\treturn string;\r\n\t};\r\n\r\n\ttoJSON() { return JSON.stringify({ ...this }) };\r\n}\r\n","import { $platform, _, log } from \"./utils.mjs\";\r\n\r\nexport default function done(object = {}) {\r\n    switch ($platform) {\r\n        case \"Surge\":\r\n            if (object.policy) _.set(object, \"headers.X-Surge-Policy\", object.policy);\r\n            log(\"\", `🚩 执行结束! 🕛 ${(new Date().getTime() / 1000 - $script.startTime)} 秒`, \"\");\r\n            $done(object);\r\n            break;\r\n        case \"Loon\":\r\n            if (object.policy) object.node = object.policy;\r\n            log(\"\", `🚩 执行结束! 🕛 ${(new Date() - $script.startTime) / 1000} 秒`, \"\");\r\n            $done(object);\r\n            break;\r\n        case \"Stash\":\r\n            if (object.policy) _.set(object, \"headers.X-Stash-Selected-Proxy\", encodeURI(object.policy));\r\n            log(\"\", `🚩 执行结束! 🕛 ${(new Date() - $script.startTime) / 1000} 秒`, \"\");\r\n            $done(object);\r\n            break;\r\n        case \"Egern\":\r\n            log(\"\", `🚩 执行结束!`, \"\");\r\n            $done(object);\r\n            break;\r\n        case \"Shadowrocket\":\r\n        default:\r\n            log(\"\", `🚩 执行结束!`, \"\");\r\n            $done(object);\r\n            break;\r\n        case \"Quantumult X\":\r\n            if (object.policy) _.set(object, \"opts.policy\", object.policy);\r\n            // 移除不可写字段\r\n            delete object[\"auto-redirect\"];\r\n            delete object[\"auto-cookie\"];\r\n            delete object[\"binary-mode\"];\r\n            delete object.charset;\r\n            delete object.host;\r\n            delete object.insecure;\r\n            delete object.method; // 1.4.x 不可写\r\n            delete object.opt; // $task.fetch() 参数, 不可写\r\n            delete object.path; // 可写, 但会与 url 冲突\r\n            delete object.policy;\r\n            delete object[\"policy-descriptor\"];\r\n            delete object.scheme;\r\n            delete object.sessionIndex;\r\n            delete object.statusCode;\r\n            delete object.timeout;\r\n            if (object.body instanceof ArrayBuffer) {\r\n                object.bodyBytes = object.body;\r\n                delete object.body;\r\n            } else if (ArrayBuffer.isView(object.body)) {\r\n                object.bodyBytes = object.body.buffer.slice(object.body.byteOffset, object.body.byteLength + object.body.byteOffset);\r\n                delete object.body;\r\n            } else if (object.body) delete object.bodyBytes;\r\n            log(\"\", `🚩 执行结束!`, \"\");\r\n            $done(object);\r\n            break;\r\n        case \"Node.js\":\r\n            log(\"\", `🚩 执行结束!`, \"\");\r\n            process.exit(1);\r\n            break;\r\n    }\r\n}\r\n","import { $platform, _ } from \"./utils.mjs\";\r\nimport initGotEnv from \"./initGotEnv.mjs\";\r\nexport default async function fetch(request = {} || \"\", option = {}) {\r\n    // 初始化参数\r\n    switch (request.constructor) {\r\n        case Object:\r\n            request = { ...option, ...request };\r\n            break;\r\n        case String:\r\n            request = { ...option, \"url\": request };\r\n            break;\r\n    };\r\n    // 自动判断请求方法\r\n    if (!request.method) {\r\n        request.method = \"GET\";\r\n        if (request.body ?? request.bodyBytes) request.method = \"POST\";\r\n    };\r\n    // 移除请求头中的部分参数, 让其自动生成\r\n    delete request.headers?.Host;\r\n    delete request.headers?.[\":authority\"];\r\n    delete request.headers?.[\"Content-Length\"];\r\n    delete request.headers?.[\"content-length\"];\r\n    // 定义请求方法（小写）\r\n    const method = request.method.toLocaleLowerCase();\r\n    // 判断平台\r\n    switch ($platform) {\r\n        case \"Loon\":\r\n        case \"Surge\":\r\n        case \"Stash\":\r\n        case \"Egern\":\r\n        case \"Shadowrocket\":\r\n        default:\r\n            // 转换请求参数\r\n            if (request.timeout) {\r\n                request.timeout = parseInt(request.timeout, 10);\r\n                switch ($platform) {\r\n                    case \"Loon\":\r\n                    case \"Shadowrocket\":\r\n                    case \"Stash\":\r\n                    case \"Egern\":\r\n                    default:\r\n                        request.timeout = request.timeout / 1000;\r\n                        break;\r\n                    case \"Surge\":\r\n                        break;\r\n                };\r\n            };\r\n            if (request.policy) {\r\n                switch ($platform) {\r\n                    case \"Loon\":\r\n                        request.node = request.policy;\r\n                        break;\r\n                    case \"Stash\":\r\n                        _.set(request, \"headers.X-Stash-Selected-Proxy\", encodeURI(request.policy));\r\n                        break;\r\n                    case \"Shadowrocket\":\r\n                        _.set(request, \"headers.X-Surge-Proxy\", request.policy);\r\n                        break;\r\n                };\r\n            };\r\n            if (typeof request.redirection === \"boolean\") request[\"auto-redirect\"] = request.redirection;\r\n            // 转换请求体\r\n            if (request.bodyBytes && !request.body) {\r\n                request.body = request.bodyBytes;\r\n                delete request.bodyBytes;\r\n            };\r\n            // 发送请求\r\n            return await new Promise((resolve, reject) => {\r\n                $httpClient[method](request, (error, response, body) => {\r\n                    if (error) reject(error);\r\n                    else {\r\n                        response.ok = /^2\\d\\d$/.test(response.status);\r\n                        response.statusCode = response.status;\r\n                        if (body) {\r\n                            response.body = body;\r\n                            if (request[\"binary-mode\"] == true) response.bodyBytes = body;\r\n                        };\r\n                        resolve(response);\r\n                    }\r\n                });\r\n            });\r\n        case \"Quantumult X\":\r\n            // 转换请求参数\r\n            if (request.policy) _.set(request, \"opts.policy\", request.policy);\r\n            if (typeof request[\"auto-redirect\"] === \"boolean\") _.set(request, \"opts.redirection\", request[\"auto-redirect\"]);\r\n            // 转换请求体\r\n            if (request.body instanceof ArrayBuffer) {\r\n                request.bodyBytes = request.body;\r\n                delete request.body;\r\n            } else if (ArrayBuffer.isView(request.body)) {\r\n                request.bodyBytes = request.body.buffer.slice(request.body.byteOffset, request.body.byteLength + request.body.byteOffset);\r\n                delete object.body;\r\n            } else if (request.body) delete request.bodyBytes;\r\n            // 发送请求\r\n            return await $task.fetch(request).then(\r\n                response => {\r\n                    response.ok = /^2\\d\\d$/.test(response.statusCode);\r\n                    response.status = response.statusCode;\r\n                    return response;\r\n                },\r\n                reason => Promise.reject(reason.error));\r\n        case \"Node.js\":\r\n            let iconv = require(\"iconv-lite\")\r\n            initGotEnv(request)\r\n            const { url, ...option } = request\r\n            return await this.got[method](url, option)\r\n                .on(\"redirect\", (response, nextOpts) => {\r\n                    try {\r\n                        if (response.headers[\"set-cookie\"]) {\r\n                            const ck = response.headers[\"set-cookie\"]\r\n                                .map(this.cktough.Cookie.parse)\r\n                                .toString()\r\n                            if (ck) {\r\n                                this.ckjar.setCookieSync(ck, null)\r\n                            }\r\n                            nextOpts.cookieJar = this.ckjar\r\n                        }\r\n                    } catch (e) {\r\n                        this.logErr(e)\r\n                    }\r\n                    // this.ckjar.setCookieSync(response.headers[\"set-cookie\"].map(Cookie.parse).toString())\r\n                })\r\n                .then(\r\n                    response => {\r\n                        response.statusCode = response.status;\r\n                        response.body = iconv.decode(response.rawBody, \"utf-8\");\r\n                        response.bodyBytes = response.rawBody;\r\n                        return response;\r\n                    },\r\n                    error => Promise.reject(error.message));\r\n    };\r\n};\r\n","import { _, Storage, log } from \"./utils.mjs\";\r\n\r\n/**\r\n * Get Storage Variables\r\n * @link https://github.com/NanoCat-Me/utils/blob/main/getStorage.mjs\r\n * @author VirgilClyne\r\n * @param {String} key - Persistent Store Key\r\n * @param {Array} names - Platform Names\r\n * @param {Object} database - Default Database\r\n * @return {Object} { Settings, Caches, Configs }\r\n */\r\nexport default function getStorage(key, names, database) {\r\n    //log(`☑️ getStorage, Get Environment Variables`, \"\");\r\n    /***************** BoxJs *****************/\r\n    // 包装为局部变量，用完释放内存\r\n    // BoxJs的清空操作返回假值空字符串, 逻辑或操作符会在左侧操作数为假值时返回右侧操作数。\r\n    let BoxJs = Storage.getItem(key, database);\r\n    //log(`🚧 getStorage, Get Environment Variables`, `BoxJs类型: ${typeof BoxJs}`, `BoxJs内容: ${JSON.stringify(BoxJs)}`, \"\");\r\n    /***************** Argument *****************/\r\n    let Argument = {};\r\n    switch (typeof $argument) {\r\n        case \"string\":\r\n            let arg = Object.fromEntries($argument.split(\"&\").map((item) => item.split(\"=\").map(i => i.replace(/\\\"/g, ''))));\r\n            for (let item in arg) _.set(Argument, item, arg[item]);\r\n            break;\r\n        case \"object\":\r\n            for (let item in $argument) _.set(Argument, item, $argument[item]);\r\n            break;\r\n        case \"undefined\":\r\n            break;\r\n    };\r\n    //log(`✅ getStorage, Get Environment Variables`, `Argument类型: ${typeof Argument}`, `Argument内容: ${JSON.stringify(Argument)}`, \"\");\r\n    /***************** Store *****************/\r\n    const Store = { Settings: database?.Default?.Settings || {}, Configs: database?.Default?.Configs || {}, Caches: {} };\r\n    if (!Array.isArray(names)) names = [names];\r\n    //log(`🚧 getStorage, Get Environment Variables`, `names类型: ${typeof names}`, `names内容: ${JSON.stringify(names)}`, \"\");\r\n    for (let name of names) {\r\n        Store.Settings = { ...Store.Settings, ...database?.[name]?.Settings, ...Argument, ...BoxJs?.[name]?.Settings };\r\n        Store.Configs = { ...Store.Configs, ...database?.[name]?.Configs };\r\n        if (BoxJs?.[name]?.Caches && typeof BoxJs?.[name]?.Caches === \"string\") BoxJs[name].Caches = JSON.parse(BoxJs?.[name]?.Caches);\r\n        Store.Caches = { ...Store.Caches, ...BoxJs?.[name]?.Caches };\r\n    };\r\n    //log(`🚧 getStorage, Get Environment Variables`, `Store.Settings类型: ${typeof Store.Settings}`, `Store.Settings: ${JSON.stringify(Store.Settings)}`, \"\");\r\n    traverseObject(Store.Settings, (key, value) => {\r\n        //log(`🚧 getStorage, traverseObject`, `${key}: ${typeof value}`, `${key}: ${JSON.stringify(value)}`, \"\");\r\n        if (value === \"true\" || value === \"false\") value = JSON.parse(value); // 字符串转Boolean\r\n        else if (typeof value === \"string\") {\r\n            if (value.includes(\",\")) value = value.split(\",\").map(item => string2number(item)); // 字符串转数组转数字\r\n            else value = string2number(value); // 字符串转数字\r\n        };\r\n        return value;\r\n    });\r\n    //log(`✅ getStorage, Get Environment Variables`, `Store: ${typeof Store.Caches}`, `Store内容: ${JSON.stringify(Store)}`, \"\");\r\n    return Store;\r\n    /***************** function *****************/\r\n    function traverseObject(o, c) { for (var t in o) { var n = o[t]; o[t] = \"object\" == typeof n && null !== n ? traverseObject(n, c) : c(t, n) } return o }\r\n    function string2number(string) { if (string && !isNaN(string)) string = parseInt(string, 10); return string }\r\n};\r\n","export default function initGotEnv(opts) {\r\n    this.got = this.got ? this.got : require(\"got\");\r\n    this.cktough = this.cktough ? this.cktough : require(\"tough-cookie\");\r\n    this.ckjar = this.ckjar ? this.ckjar : new this.cktough.CookieJar();\r\n    if (opts) {\r\n        opts.headers = opts.headers ? opts.headers : {}\r\n        if (undefined === opts.headers.Cookie && undefined === opts.cookieJar) {\r\n            opts.cookieJar = this.ckjar\r\n        }\r\n    };\r\n};\r\n","import { $platform, log } from \"./utils.mjs\";\r\nexport default function logError(error) {\r\n    switch ($platform) {\r\n        case \"Surge\":\r\n        case \"Loon\":\r\n        case \"Stash\":\r\n        case \"Egern\":\r\n        case \"Shadowrocket\":\r\n        case \"Quantumult X\":\r\n        default:\r\n            log(\"\", `❗️执行错误!`, error, \"\");\r\n            break\r\n        case \"Node.js\":\r\n            log(\"\", `❗️执行错误!`, error.stack, \"\");\r\n            break\r\n    };\r\n};\r\n","import { $platform, log } from \"./utils.mjs\";\r\n/**\r\n * 系统通知\r\n *\r\n * > 通知参数: 同时支持 QuanX 和 Loon 两种格式, EnvJs根据运行环境自动转换, Surge 环境不支持多媒体通知\r\n *\r\n * 示例:\r\n * $.msg(title, subtitle, body, \"twitter://\")\r\n * $.msg(title, subtitle, body, { \"open-url\": \"twitter://\", \"media-url\": \"https://github.githubassets.com/images/modules/open_graph/github-mark.png\" })\r\n * $.msg(title, subtitle, body, { \"open-url\": \"https://bing.com\", \"media-url\": \"https://github.githubassets.com/images/modules/open_graph/github-mark.png\" })\r\n *\r\n * @param {*} title 标题\r\n * @param {*} subtitle 副标题\r\n * @param {*} body 内容\r\n * @param {*} mutableContent 通知扩展字段\r\n *\r\n */\r\nexport default function notification(title = \"\", subtitle = \"\", body = \"\", mutableContent) {\r\n    switch ($platform) {\r\n        case \"Surge\":\r\n        case \"Loon\":\r\n        case \"Stash\":\r\n        case \"Egern\":\r\n        case \"Shadowrocket\":\r\n        default:\r\n            $notification.post(title, subtitle, body, MutableContent(mutableContent))\r\n            break\r\n        case \"Quantumult X\":\r\n            $notify(title, subtitle, body, MutableContent(mutableContent))\r\n            break\r\n        case \"Node.js\":\r\n            break\r\n    };\r\n    log(...[\"\", \"==============📣系统通知📣==============\", subtitle || \"\", body || \"\"]);\r\n    const MutableContent = (content) => {\r\n        switch (typeof content) {\r\n            case undefined:\r\n                return content\r\n            case \"string\":\r\n                switch ($platform) {\r\n                    case \"Surge\":\r\n                    case \"Stash\":\r\n                    case \"Egern\":\r\n                    default:\r\n                        return { url: content };\r\n                    case \"Loon\":\r\n                    case \"Shadowrocket\":\r\n                        return content\r\n                    case \"Quantumult X\":\r\n                        return { \"open-url\": content };\r\n                    case \"Node.js\":\r\n                        return undefined;\r\n                }\r\n            case \"object\":\r\n                switch ($platform) {\r\n                    case \"Surge\":\r\n                    case \"Stash\":\r\n                    case \"Egern\":\r\n                    case \"Shadowrocket\":\r\n                    default: {\r\n                        let openUrl = content.url || content.openUrl || content[\"open-url\"];\r\n                        return { url: openUrl };\r\n                    }\r\n                    case \"Loon\": {\r\n                        let openUrl = content.openUrl || content.url || content[\"open-url\"];\r\n                        let mediaUrl = content.mediaUrl || content[\"media-url\"];\r\n                        return { openUrl, mediaUrl };\r\n                    }\r\n                    case \"Quantumult X\": {\r\n                        let openUrl = content[\"open-url\"] || content.url || content.openUrl;\r\n                        let mediaUrl = content[\"media-url\"] || content.mediaUrl;\r\n                        let updatePasteboard = content[\"update-pasteboard\"] || content.updatePasteboard;\r\n                        return {\r\n                            \"open-url\": openUrl,\r\n                            \"media-url\": mediaUrl,\r\n                            \"update-pasteboard\": updatePasteboard\r\n                        };\r\n                    }\r\n                    case \"Node.js\":\r\n                        return undefined;\r\n                }\r\n            default:\r\n                return undefined;\r\n        }\r\n    };\r\n};\r\n","export const $platform = platform();\r\nexport function platform() {\r\n    if (\"undefined\" !== typeof $environment && $environment[\"surge-version\"])\r\n        return \"Surge\"\r\n    if (\"undefined\" !== typeof $environment && $environment[\"stash-version\"])\r\n        return \"Stash\"\r\n    if (\"undefined\" !== typeof module && !!module.exports) return \"Node.js\"\r\n    if (\"undefined\" !== typeof $task) return \"Quantumult X\"\r\n    if (\"undefined\" !== typeof $loon) return \"Loon\"\r\n    if (\"undefined\" !== typeof $rocket) return \"Shadowrocket\"\r\n    if (\"undefined\" !== typeof Egern) return \"Egern\"\r\n}\r\n","import { _, Storage, fetch, logError } from \"./utils.mjs\";\r\n\r\nexport default async function runScript(script, runOpts) {\r\n    let httpapi = Storage.getItem(\"@chavy_boxjs_userCfgs.httpapi\");\r\n    httpapi = httpapi?.replace?.(/\\n/g, \"\")?.trim();\r\n    let httpapi_timeout = Storage.getItem(\"@chavy_boxjs_userCfgs.httpapi_timeout\");\r\n    httpapi_timeout = (httpapi_timeout * 1) ?? 20;\r\n    httpapi_timeout = runOpts?.timeout ?? httpapi_timeout;\r\n    const [password, address] = httpapi.split(\"@\");\r\n    const request = {\r\n        url: `http://${address}/v1/scripting/evaluate`,\r\n        body: {\r\n            script_text: script,\r\n            mock_type: \"cron\",\r\n            timeout: httpapi_timeout\r\n        },\r\n        headers: { \"X-Key\": password, \"Accept\": \"*/*\" },\r\n        timeout: httpapi_timeout\r\n    };\r\n    await fetch(request).then(response => response.body, error => logError(error));\r\n}\r\n","import { $platform } from \"./platform.mjs\";\r\nimport URL from \"./URL.mjs\";\r\nimport _ from \"./Lodash.mjs\";\r\nimport Storage from \"./Storage.mjs\";\r\nimport fetch from \"./fetch.mjs\";\r\nimport notification from \"./notification.mjs\";\r\nexport const log = (...logs) => console.log(logs.join(\"\\n\"));\r\nimport logError from \"./logError.mjs\";\r\nexport const wait = (delay = 1000) => new Promise(resolve => setTimeout(resolve, delay));\r\nimport done from \"./done.mjs\";\r\nexport const getScript = async (url) => await fetch(url).then(response => response.body);\r\nimport runScript from \"./runScript.mjs\";\r\n//import GRPC from \"./GRPC.mjs\";\r\nexport { $platform, URL, _, Storage, fetch, notification, logError, done, runScript };\r\n","import { $platform, URL, _, Storage, fetch, notification, log, logError, wait, done, getScript, runScript } from \"./utils/utils.mjs\";\r\nimport M3U8 from \"./EXTM3U/EXTM3U.mjs\";\r\nimport AttrList from \"./class/AttrList.mjs\";\r\nimport Database from \"./database/index.mjs\";\r\nimport detectPlatform from \"./function/detectPlatform.mjs\";\r\nimport setENV from \"./function/setENV.mjs\";\r\nimport isStandard from \"./function/isStandard.mjs\";\r\nimport detectPlaylist from \"./function/detectPlaylist.mjs\";\r\nimport setCache from \"./function/setCache.mjs\";\r\nimport aPath from \"./function/aPath.mjs\";\r\nlog(\"v1.4.0(1007)\");\r\n/***************** Processing *****************/\r\n// 解构URL\r\nconst url = new URL($request.url);\r\nlog(`⚠ url: ${url.toJSON()}`, \"\");\r\n// 获取连接参数\r\nconst METHOD = $request.method, HOST = url.hostname, PATH = url.pathname, PATHs = url.pathname.split(\"/\").filter(Boolean);\r\nlog(`⚠ METHOD: ${METHOD}, HOST: ${HOST}, PATH: ${PATH}` , \"\");\r\n// 解析格式\r\nconst FORMAT = ($response.headers?.[\"Content-Type\"] ?? $response.headers?.[\"content-type\"])?.split(\";\")?.[0];\r\nlog(`⚠ FORMAT: ${FORMAT}`, \"\");\r\n(async () => {\r\n\t// 获取平台\r\n\tconst PLATFORM = detectPlatform($request.url);\r\n\tlog(`⚠ PLATFORM: ${PLATFORM}`, \"\");\r\n\t// 读取设置\r\n\tconst { Settings, Caches, Configs } = setENV(\"DualSubs\", [([\"YouTube\", \"Netflix\", \"BiliBili\", \"Spotify\"].includes(PLATFORM)) ? PLATFORM : \"Universal\", \"Composite\"], Database);\r\n\tlog(`⚠ Settings.Switch: ${Settings?.Switch}`, \"\");\r\n\tswitch (Settings.Switch) {\r\n\t\tcase true:\r\n\t\tdefault:\r\n\t\t\t// 获取字幕类型与语言\r\n\t\t\tconst Type = url.searchParams?.get(\"subtype\") ?? Settings.Type, Languages = [url.searchParams?.get(\"lang\")?.toUpperCase?.() ?? Settings.Languages[0], (url.searchParams?.get(\"tlang\") ?? Caches?.tlang)?.toUpperCase?.() ?? Settings.Languages[1]];\r\n\t\t\tlog(`⚠ Type: ${Type}, Languages: ${Languages}`, \"\");\r\n\t\t\t// 兼容性判断\r\n\t\t\tconst { standard: STANDARD, device: DEVICE } = isStandard(url, $request.headers, PLATFORM);\r\n\t\t\t// 创建空数据\r\n\t\t\tlet body = {};\r\n\t\t\t// 格式判断\r\n\t\t\tswitch (FORMAT) {\r\n\t\t\t\tcase undefined: // 视为无body\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"application/x-www-form-urlencoded\":\r\n\t\t\t\tcase \"text/plain\":\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"application/x-mpegURL\":\r\n\t\t\t\tcase \"application/x-mpegurl\":\r\n\t\t\t\tcase \"application/vnd.apple.mpegurl\":\r\n\t\t\t\tcase \"audio/mpegurl\":\r\n\t\t\t\t\t// 序列化M3U8\r\n\t\t\t\t\tbody = M3U8.parse($response.body);\r\n\t\t\t\t\t//log(`🚧 M3U8.parse($response.body): ${JSON.stringify(body)}`, \"\");\r\n\t\t\t\t\t// 获取播放列表类型\r\n\t\t\t\t\tswitch (detectPlaylist(body)) {\r\n\t\t\t\t\t\tcase \"Multivariant Playlist\":\r\n\t\t\t\t\t\t\t// 读取已存数据\r\n\t\t\t\t\t\t\tlet playlistCache = Caches.Playlists.Master.get($request.url) || {};\r\n\t\t\t\t\t\t\t// 获取特定语言的字幕\r\n\t\t\t\t\t\t\tplaylistCache[Languages[0]] = new AttrList(FORMAT, PLATFORM).get($request.url, body, \"SUBTITLES\", Configs.Languages[Languages[0]]);\r\n\t\t\t\t\t\t\tplaylistCache[Languages[1]] = new AttrList(FORMAT, PLATFORM).get($request.url, body, \"SUBTITLES\", Configs.Languages[Languages[1]]);\r\n\t\t\t\t\t\t\t// 写入选项\r\n\t\t\t\t\t\t\tbody = new AttrList(FORMAT, PLATFORM).set(body, playlistCache, Settings.Types, Languages, STANDARD, DEVICE);\r\n\t\t\t\t\t\t\t// 写入数据\r\n\t\t\t\t\t\t\tCaches.Playlists.Master.set($request.url, playlistCache);\r\n\t\t\t\t\t\t\t// 格式化缓存\r\n\t\t\t\t\t\t\tCaches.Playlists.Master = setCache(Caches.Playlists.Master, Settings.CacheSize);\r\n\t\t\t\t\t\t\t// 写入持久化储存\r\n\t\t\t\t\t\t\tStorage.setItem(`@DualSubs.${\"Composite\"}.Caches.Playlists.Master`, Caches.Playlists.Master);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"Media Playlist\":\r\n\t\t\t\t\t\t\t// 处理类型\r\n\t\t\t\t\t\t\tswitch (Type) {\r\n\t\t\t\t\t\t\t\tcase \"Official\":\r\n\t\t\t\t\t\t\t\t\tlog(`⚠ 官方字幕`, \"\");\r\n\t\t\t\t\t\t\t\t\t// 获取字幕播放列表m3u8缓存（map）\r\n\t\t\t\t\t\t\t\t\tconst { subtitlesPlaylist, subtitlesPlaylistIndex } = getPlaylistCache($request.url, Caches.Playlists.Master, Languages[0]) ?? getPlaylistCache($request.url, Caches.Playlists.Master, Languages[1]);\r\n\t\t\t\t\t\t\t\t\t// 写入字幕文件地址vtt缓存（map）\r\n\t\t\t\t\t\t\t\t\tCaches.Playlists.Subtitle = await setSubtitlesCache(Caches.Playlists.Subtitle, subtitlesPlaylist, Languages[0], subtitlesPlaylistIndex, PLATFORM);\r\n\t\t\t\t\t\t\t\t\tCaches.Playlists.Subtitle = await setSubtitlesCache(Caches.Playlists.Subtitle, subtitlesPlaylist, Languages[1], subtitlesPlaylistIndex, PLATFORM);\r\n\t\t\t\t\t\t\t\t\t// 格式化缓存\r\n\t\t\t\t\t\t\t\t\tCaches.Playlists.Subtitle = setCache(Caches?.Playlists.Subtitle, Settings.CacheSize);\r\n\t\t\t\t\t\t\t\t\t// 写入缓存\r\n\t\t\t\t\t\t\t\t\tStorage.setItem(`@DualSubs.${\"Composite\"}.Caches.Playlists.Subtitle`, Caches.Playlists.Subtitle);\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tcase \"Translate\":\r\n\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\tlog(`⚠ 翻译字幕`, \"\");\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tcase \"External\":\r\n\t\t\t\t\t\t\t\t\tlog(`⚠ 外挂字幕`, \"\");\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t// WebVTT.m3u8加参数\r\n\t\t\t\t\t\t\tbody = body.map((item, i) => {\r\n\t\t\t\t\t\t\t\tif (/^.+\\.((web)?vtt|ttml2?|xml|smi)(\\?.+)?$/.test(item?.URI)) {\r\n\t\t\t\t\t\t\t\t\tconst symbol = (item.URI.includes(\"?\")) ? \"&\" : \"?\";\r\n\t\t\t\t\t\t\t\t\tif (!/empty|blank|default/.test(item.URI)) {\r\n\t\t\t\t\t\t\t\t\t\titem.URI += `${symbol}subtype=${Type}`;\r\n\t\t\t\t\t\t\t\t\t\tif (url.searchParams?.has(\"lang\")) item.URI += `&lang=${url.searchParams.get(\"lang\")}`;\r\n\t\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t\tif (item.TAG === \"#EXT-X-BYTERANGE\") body[i - 1].URI = item.URI; // 删除BYTERANGE\r\n\t\t\t\t\t\t\t\t\telse return item;\r\n\t\t\t\t\t\t\t\t} else if (item?.URI && PLATFORM === \"MGM+\") {\r\n\t\t\t\t\t\t\t\t\titem.URI += `?subtype=${Type}`;\r\n\t\t\t\t\t\t\t\t\tif (url.searchParams?.has(\"lang\")) item.URI += `&lang=${url.searchParams.get(\"lang\")}`;\r\n\t\t\t\t\t\t\t\t\treturn item;\r\n\t\t\t\t\t\t\t\t} else return item;\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t};\r\n\t\t\t\t\t// 字符串M3U8\r\n\t\t\t\t\t$response.body = M3U8.stringify(body);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"text/xml\":\r\n\t\t\t\tcase \"text/html\":\r\n\t\t\t\tcase \"text/plist\":\r\n\t\t\t\tcase \"application/xml\":\r\n\t\t\t\tcase \"application/plist\":\r\n\t\t\t\tcase \"application/x-plist\":\r\n\t\t\t\t\t//body = XML.parse($response.body);\r\n\t\t\t\t\t//log(`🚧 body: ${JSON.stringify(body)}`, \"\");\r\n\t\t\t\t\t//$response.body = XML.stringify(body);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"text/vtt\":\r\n\t\t\t\tcase \"application/vtt\":\r\n\t\t\t\t\t//body = VTT.parse($response.body);\r\n\t\t\t\t\t//log(`🚧 body: ${JSON.stringify(body)}`, \"\");\r\n\t\t\t\t\t//$response.body = VTT.stringify(body);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"text/json\":\r\n\t\t\t\tcase \"application/json\":\r\n\t\t\t\t\tbody = JSON.parse($response.body ?? \"{}\");\r\n\t\t\t\t\t//log(`🚧 body: ${JSON.stringify(body)}`, \"\");\r\n\t\t\t\t\t// 读取已存数据\r\n\t\t\t\t\tlet playlistCache = Caches.Playlists.Master.get($request.url) || {};\r\n\t\t\t\t\t// 判断平台\r\n\t\t\t\t\tswitch (PLATFORM) {\r\n\t\t\t\t\t\tcase \"PrimeVideo\":\r\n\t\t\t\t\t\t\tif (body?.subtitleUrls) {\r\n\t\t\t\t\t\t\t\t// 获取特定语言的字幕\r\n\t\t\t\t\t\t\t\tplaylistCache[Languages[0]] = new AttrList(FORMAT, PLATFORM).get($request.url, body, \"subtitleUrls\", Configs.Languages[Languages[0]]);\r\n\t\t\t\t\t\t\t\tplaylistCache[Languages[1]] = new AttrList(FORMAT, PLATFORM).get($request.url, body, \"subtitleUrls\", Configs.Languages[Languages[1]]);\r\n\t\t\t\t\t\t\t\t//log(`🚧 playlistCache[Languages[0]]: ${JSON.stringify(playlistCache[Languages[0]])}`, \"\");\r\n\t\t\t\t\t\t\t\tbody.subtitleUrls = new AttrList(FORMAT, PLATFORM).set(body.subtitleUrls, playlistCache, Settings.Types, Languages, STANDARD, DEVICE);\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t};\r\n\t\t\t\t\t// 写入数据\r\n\t\t\t\t\tCaches.Playlists.Master.set($request.url, playlistCache);\r\n\t\t\t\t\t// 格式化缓存\r\n\t\t\t\t\tCaches.Playlists.Master = setCache(Caches.Playlists.Master, Settings.CacheSize);\r\n\t\t\t\t\t// 写入持久化储存\r\n\t\t\t\t\tStorage.setItem(`@DualSubs.${\"Composite\"}.Caches.Playlists.Master`, Caches.Playlists.Master);\r\n\t\t\t\t\t//log(`🚧 body: ${JSON.stringify(body)}`, \"\");\r\n\t\t\t\t\t$response.body = JSON.stringify(body);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"application/protobuf\":\r\n\t\t\t\tcase \"application/x-protobuf\":\r\n\t\t\t\tcase \"application/vnd.google.protobuf\":\r\n\t\t\t\tcase \"application/grpc\":\r\n\t\t\t\tcase \"application/grpc+proto\":\r\n\t\t\t\tcase \"application/octet-stream\":\r\n\t\t\t\t\tbreak;\r\n\t\t\t};\r\n\t\t\tbreak;\r\n\t\tcase false:\r\n\t\t\tbreak;\r\n\t};\r\n})()\r\n\t.catch((e) => logError(e))\r\n\t.finally(() => done($response))\r\n\r\n/***************** Function *****************/\r\n/**\r\n * Get Playlist Cache\r\n * @author VirgilClyne\r\n * @param {String} url - Request URL / Master Playlist URL\r\n * @param {Map} cache - Playlist Cache\r\n * @param {String} language - Language\r\n * @return {Promise<Object>} { masterPlaylistURL, subtitlesPlaylist, subtitlesPlaylistIndex }\r\n */\r\nfunction getPlaylistCache(url, cache, language) {\r\n\tlog(`☑️ getPlaylistCache, language: ${language}`, \"\");\r\n\tlet masterPlaylistURL = \"\";\r\n\tlet subtitlesPlaylist = {};\r\n\tlet subtitlesPlaylistIndex = 0;\r\n\tcache?.forEach((Value, Key) => {\r\n\t\t//log(`🚧 getPlaylistCache, Key: ${Key}, Value: ${JSON.stringify(Value)}`, \"\");\r\n\t\tif (Array.isArray(Value?.[language])) {\r\n\t\t\tlet Array = Value?.[language];\r\n\t\t\t//log(`🚧 getPlaylistCache`, `Array: ${JSON.stringify(Array)}`, \"\");\r\n\t\t\tif (Array?.some((Object, Index) => {\r\n\t\t\t\tif (url.includes(Object?.URI ?? Object?.OPTION?.URI ?? null)) {\r\n\t\t\t\t\tsubtitlesPlaylistIndex = Index;\r\n\t\t\t\t\tlog(`🚧 getPlaylistCache`, `subtitlesPlaylistIndex: ${subtitlesPlaylistIndex}`, \"\");\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else return false;\r\n\t\t\t})) {\r\n\t\t\t\tmasterPlaylistURL = Key;\r\n\t\t\t\tsubtitlesPlaylist = Value;\r\n\t\t\t\t//log(`🚧 getPlaylistCache`, `masterPlaylistURL: ${masterPlaylistURL}`, `subtitlesPlaylist: ${JSON.stringify(subtitlesPlaylist)}`, \"\");\r\n\t\t\t};\r\n\t\t};\r\n\t});\r\n\tlog(`✅ getPlaylistCache`, `masterPlaylistURL: ${JSON.stringify(masterPlaylistURL)}`, \"\");\r\n\treturn { masterPlaylistURL, subtitlesPlaylist, subtitlesPlaylistIndex };\r\n};\r\n\r\n/**\r\n * Set Subtitles Cache\r\n * @author VirgilClyne\r\n * @param {Map} cache - Subtitles Cache\r\n * @param {Object} playlist - Subtitles Playlist Cache\r\n * @param {Array} language - Language\r\n * @param {Number} index - Subtitles Playlist Index\r\n * @param {String} platform - Steaming Media Platform\r\n * @return {Promise<Object>} { masterPlaylistURL, subtitlesPlaylist, subtitlesPlaylistIndex }\r\n */\r\nasync function setSubtitlesCache(cache, playlist, language, index = 0, platform = \"Universal\") {\r\n\tlog(`☑️ setSubtitlesCache, language: ${language}, index: ${index}`, \"\");\r\n\tawait Promise.all(playlist?.[language]?.map(async (val, ind, arr) => {\r\n\t\t//log(`🚧 setSubtitlesCache, ind: ${ind}, val: ${JSON.stringify(val)}`, \"\");\r\n\t\tif ((arr[index] && (ind === index)) || (!arr[index])) {\r\n\t\t\t// 查找字幕文件地址vtt缓存（map）\r\n\t\t\tlet subtitlesURLarray = cache.get(val.URL) ?? [];\r\n\t\t\t//log(`🚧 setSubtitlesCache`, `subtitlesURLarray: ${JSON.stringify(subtitlesURLarray)}`, \"\");\r\n\t\t\t//log(`🚧 setSubtitlesCache`, `val?.URL: ${val?.URL}`, \"\");\r\n\t\t\t// 获取字幕文件地址vtt/ttml缓存（按语言）\r\n\t\t\tif (subtitlesURLarray.length === 0) subtitlesURLarray = await getSubtitles(val?.URL, $request.headers, platform);\r\n\t\t\t//log(`🚧 setSubtitlesCache`, `subtitlesURLarray: ${JSON.stringify(subtitlesURLarray)}`, \"\");\r\n\t\t\t// 写入字幕文件地址vtt/ttml缓存到map\r\n\t\t\tif (subtitlesURLarray.length !== 0) cache = cache.set(val.URL, subtitlesURLarray);\r\n\t\t\t//log(`✅ setSubtitlesCache`, `subtitlesURLarray: ${JSON.stringify(cache.get(val?.URL))}`, \"\");\r\n\t\t\tlog(`✅ setSubtitlesCache`, `val?.URL: ${val?.URL}`, \"\");\r\n\t\t};\r\n\t}));\r\n\treturn cache;\r\n};\r\n\r\n/**\r\n * Get Subtitle *.vtt URLs\r\n * @author VirgilClyne\r\n * @param {String} url - VTT URL\r\n * @param {String} headers - Request Headers\r\n * @param {String} platform - Steaming Media Platform\r\n * @return {Promise<*>}\r\n */\r\nasync function getSubtitles(url, headers, platform) {\r\n\tlog(`☑️ Get Subtitle *.vtt *.ttml URLs`, \"\");\r\n\tlet subtitles = await fetch(url, { headers: headers }).then((response, error) => {\r\n\t\t//log(`🚧 Get Subtitle *.vtt *.ttml URLs`, `response: ${JSON.stringify(response)}`, \"\");\r\n\t\tlet subtitlePlayList = M3U8.parse(response.body);\r\n\t\treturn subtitlePlayList\r\n\t\t\t.filter(({ URI }) => (/^.+\\.((web)?vtt|ttml2?|xml|smi)(\\?.+)?$/.test(URI)))\r\n\t\t\t.filter(({ URI }) => !URI.includes(\"empty\"))\r\n\t\t\t.filter(({ URI }) => !URI.includes(\"blank\"))\r\n\t\t\t.filter(({ URI }) => !URI.includes(\"default\"))\r\n\t\t\t.map(({ URI }) => aPath(url, URI));\r\n\t});\r\n\tswitch (platform) {\r\n\t\tcase \"Disney+\":\r\n\t\t\tif (subtitles.some(item => /\\/.+-MAIN\\//.test(item))) subtitles = subtitles.filter(item => /\\/.+-MAIN\\//.test(item))\r\n\t\t\tbreak;\r\n\t\tcase \"PrimeVideo\":\r\n\t\t\tif (subtitles.some(item => /\\/aiv-prod-timedtext\\//.test(item))) subtitles = subtitles.filter(item => /\\/aiv-prod-timedtext\\//.test(item));\r\n\t\t\t//Array.from(new Set(subtitles));\r\n\t\t\tsubtitles = subtitles.filter((item, index, array) => {\r\n\t\t\t\t// 当前元素，在原始数组中的第一个索引==当前索引值，否则返回当前元素\r\n\t\t\t\treturn array.indexOf(item, 0) === index;\r\n\t\t\t}); // 数组去重\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t};\r\n\tlog(`✅ Get Subtitle *.vtt *.ttml URLs, subtitles: ${subtitles}`, \"\");\r\n\treturn subtitles;\r\n};\r\n"],"names":[],"mappings":";;;;;;;;;;;;AAAA;AACe;AACf;AACA;AACA,4CAA4C,WAAW,GAAG,aAAa;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,YAAY;AAC/E;AACA;AACA;AACA,IAAI;AACJ;AACA,GAAG;AACH;AACA;AACA;AACA,gDAAgD,iBAAiB;AACjE,mDAAmD,kBAAkB;AACrE;AACA;AACA,6DAA6D,UAAU;AACvE,8FAA8F,UAAU;AACxG,6GAA6G,UAAU;AACvH,sEAAsE,UAAU;AAChF;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;;;;;;;;;;;ACvCyC;AACS;AACR;AAC1C;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,qDAAG,WAAW,WAAW,GAAG,cAAc,UAAU,aAAa,YAAY,cAAc;AAC7F;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,gBAAgB,OAAO;AACvB;AACA;AACA,QAAQ,qDAAG,qCAAqC,KAAK,eAAe,UAAU;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE,wCAAwC,yBAAyB;AACjE;AACA;AACA,oBAAoB,qDAAG,sCAAsC,UAAU;AACvE;AACA;AACA;AACA;AACA,+BAA+B,+DAAK;AACpC;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,qDAAG,sCAAsC,UAAU;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qDAAG,uCAAuC,0BAA0B;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,gBAAgB,QAAQ;AACxB;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA,4DAA4D;AAC5D,QAAQ,qDAAG,sCAAsC,MAAM;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uGAAuG;AACvG;AACA,wBAAwB,qDAAG,mCAAmC,KAAK;AACnE;AACA;AACA;AACA;AACA,yHAAyH;AACzH;AACA,iEAAiE;AACjE;AACA,+HAA+H;AAC/H,6DAA6D,mEAAS;AACtE,qFAAqF,aAAa;AAClG;AACA;AACA;AACA,yDAAyD,mEAAS;AAClE,iFAAiF,aAAa;AAC9F;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,mEAAS;AAClD,8DAA8D,2CAA2C;AACzG;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0HAA0H;AAC1H;AACA,gCAAgC,qDAAG,mCAAmC,KAAK;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,MAAM,GAAG,sBAAsB,GAAG,sBAAsB;AAChI,yEAAyE,uBAAuB,GAAG,uBAAuB,GAAG,KAAK;AAClI,6EAA6E,2BAA2B,GAAG,KAAK;AAChH;AACA,iEAAiE,OAAO,UAAU,KAAK;AACvF,uEAAuE,aAAa;AACpF,sEAAsE,uBAAuB;AAC7F;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA,gEAAgE,MAAM,GAAG,sBAAsB,GAAG,aAAa;AAC/G,iEAAiE,uBAAuB,GAAG,2BAA2B,GAAG,KAAK;AAC9H,qEAAqE,2BAA2B,GAAG,KAAK;AACxG;AACA,yDAAyD,OAAO,UAAU,KAAK;AAC/E,+DAA+D,qCAAqC;AACpG,8DAA8D,uBAAuB;AACrF;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,qBAAqB;AACpE,QAAQ,qDAAG;AACX;AACA;AACA;;;;;;;;;;;;;;;;;;AClM2D;AACI;AACJ;AACA;AACA;AACI;AACA;AACF;AACV;AACnD;AACA,iEAAe;AACf,QAAQ;AACR,UAAU;AACV,QAAQ;AACR,QAAQ;AACR,QAAQ;AACR,UAAU;AACV,UAAU;AACV,SAAS;AACT,IAAI;AACJ,CAAC,EAAC;;;;;;;;;ACpBF;AACe,sCAAsC;;;;;;;;;;ACDZ;AACzC;AACe;AACf,CAAC,qDAAG;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qDAAG,mCAAmC,SAAS;AACnD;AACA;;;;;;;;;;AC3ByC;AACzC;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY,QAAQ;AACpB;AACe,iCAAiC;AAChD,CAAC,qDAAG;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF,CAAC,qDAAG,8BAA8B,KAAK;AACvC;AACA;;;;;;;;;;AC5BA;AACyC;AACzC;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY;AACZ;AACe,iDAAiD;AAChE,CAAC,qDAAG;AACJ;AACA;AACA,CAAC,qDAAG,2BAA2B,GAAG;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,qDAAG,gCAAgC,SAAS,YAAY,OAAO;AAChE,SAAS;AACT;;;;;;;;;;AC9EyC;AACzC;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,QAAQ;AACnB,YAAY,SAAS;AACrB;AACe;AACf,CAAC,qDAAG,iCAAiC,UAAU;AAC/C,kCAAkC;AAClC,kCAAkC;AAClC,CAAC,qDAAG;AACJ;AACA;;;;;;;;;;;ACfgD;AACJ;AAC5C;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,YAAY,UAAU;AACtB;AACe;AACf,CAAC,qDAAG;AACJ,OAAO,4BAA4B,EAAE,iEAAU;AAC/C;AACA,iGAAiG;AACjG,CAAC,qDAAG,6CAA6C,gBAAgB,oBAAoB,yBAAyB;AAC9G;AACA,iDAAiD,cAAc,kBAAkB,uBAAuB;AACxG,uGAAuG;AACvG,mFAAmF;AACnF,uFAAuF;AACvF,+GAA+G;AAC/G,uGAAuG;AACvG,sIAAsI;AACtI;AACA,UAAU;AACV;;;;;;;;;;AC3ByC;AACzC;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY;AACZ;AACe,iCAAiC,gBAAgB;AAChE,CAAC,qDAAG,+CAA+C,KAAK;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,MAAM,GAAG,MAAM;AAC3D;AACA;AACA,4CAA4C,MAAM,GAAG,MAAM;AAC3D;AACA;AACA,4CAA4C,MAAM;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,MAAM,GAAG,OAAO,GAAG,KAAK;AAC9D,oCAAoC,MAAM,GAAG,UAAU,GAAG,UAAU;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,MAAM,GAAG,UAAU,GAAG,UAAU;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,OAAO,IAAI,OAAO,GAAG,KAAK;AAC1D,kCAAkC,MAAM,GAAG,UAAU,GAAG,UAAU;AAClE,6CAA6C,WAAW,GAAG,KAAK;AAChE;AACA;AACA,2CAA2C,MAAM,GAAG,UAAU,GAAG,UAAU;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,gBAAgB,WAAW,KAAK;AAC1E;AACA;AACA;AACA;AACA,4BAA4B,OAAO,UAAU,KAAK;AAClD,mDAAmD,UAAU;AAC7D;AACA;AACA;AACA;AACA,CAAC,qDAAG,iDAAiD,0BAA0B;AAC/E;AACA;;;;;;;;;AC1FA;AACe;AACf;AACA;AACA,kBAAkB,6BAA6B,WAAW,GAAG,aAAa;AAC1E;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C,GAAG;AACH;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF;AACrF;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,aAAa;AACb,aAAa;AACb,eAAe;AACf,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,QAAQ;AACR,QAAQ;AACR,UAAU;AACV,SAAS;AACT;AACA,8BAA8B,KAAK,KAAK,OAAO,MAAM;AACrD;AACA;AACA;;;;;;;;;;ACrEgD;AAChD;AACe;AACf;AACA;AACA,mBAAmB,OAAO,+CAAG,aAAa,WAAW,GAAG,aAAa;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,YAAY;AACxB,gBAAgB,IAAI,IAAI,KAAK;AAC7B;AACA,wCAAwC;AACxC,gBAAgB,sBAAsB;AACtC;AACA,gBAAgB,sBAAsB;AACtC,eAAe,6CAAK;AACpB,gBAAgB,yBAAyB;AACzC;AACA;AACA,MAAM;AACN;AACA;AACA,gBAAgB,yBAAyB;AACzC;AACA;AACA,YAAY,iDAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,YAAY;AACxB,gBAAgB,IAAI,IAAI,KAAK;AAC7B;AACA,wCAAwC;AACxC,gBAAgB,sBAAsB;AACtC;AACA,gBAAgB,sBAAsB;AACtC,IAAI,6CAAK;AACT,gBAAgB,sBAAsB;AACtC;AACA,gBAAgB,OAAO;AACvB;AACA;AACA,YAAY,iDAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA,eAAe,+CAAO;AACtB;AACA;AACA;AACA,YAAY,iDAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,iDAAS;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,KAAK;AACL,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC3Ne;AACf;AACA;AACA;AACA,wBAAwB,MAAM,GAAG,QAAQ;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,KAAK,IAAI,MAAM;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wBAAwB,SAAS;AAC7C;;;;;;;;;;AC/DgD;AAChD;AACe,yBAAyB;AACxC,YAAY,iDAAS;AACrB;AACA,+BAA+B,6CAAK;AACpC,YAAY,+CAAG,gCAAgC,mDAAmD;AAClG;AACA;AACA;AACA;AACA,YAAY,+CAAG,gCAAgC,yCAAyC;AACxF;AACA;AACA;AACA,+BAA+B,6CAAK;AACpC,YAAY,+CAAG,gCAAgC,yCAAyC;AACxF;AACA;AACA;AACA,YAAY,+CAAG;AACf;AACA;AACA;AACA;AACA,YAAY,+CAAG;AACf;AACA;AACA;AACA,+BAA+B,6CAAK;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,+BAA+B;AAC/B,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,cAAc;AACd,YAAY,+CAAG;AACf;AACA;AACA;AACA,YAAY,+CAAG;AACf;AACA;AACA;AACA;;;;;;;;;;;AC7D2C;AACD;AAC3B,kCAAkC,kBAAkB;AACnE;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iDAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iDAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iDAAS;AACjC;AACA;AACA;AACA;AACA,wBAAwB,6CAAK;AAC7B;AACA;AACA,wBAAwB,6CAAK;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,gCAAgC,6CAAK;AACrC,+DAA+D,6CAAK;AACpE;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,YAAY,4DAAU;AACtB,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;;;;;;;;;ACnI8C;AAC9C;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,YAAY,UAAU;AACtB;AACe;AACf;AACA;AACA;AACA;AACA,gBAAgB,uDAAe;AAC/B,wEAAwE,aAAa,mBAAmB,sBAAsB;AAC9H;AACA;AACA;AACA;AACA;AACA,kCAAkC,6CAAK;AACvC;AACA;AACA,wCAAwC,6CAAK;AAC7C;AACA;AACA;AACA;AACA,0EAA0E,gBAAgB,sBAAsB,yBAAyB;AACzI;AACA,oBAAoB,2CAA2C,2CAA2C;AAC1G;AACA,wEAAwE,aAAa,mBAAmB,sBAAsB;AAC9H;AACA,2BAA2B;AAC3B,0BAA0B;AAC1B;AACA,yBAAyB;AACzB;AACA,iFAAiF,sBAAsB,sBAAsB,+BAA+B;AAC5J;AACA,oDAAoD,IAAI,IAAI,aAAa,MAAM,IAAI,IAAI,sBAAsB;AAC7G,8EAA8E;AAC9E;AACA,gGAAgG;AAChG,+CAA+C;AAC/C;AACA;AACA,KAAK;AACL,iEAAiE,oBAAoB,mBAAmB,sBAAsB;AAC9H;AACA;AACA,oCAAoC,mBAAmB,cAAc,6EAA6E;AAClJ,qCAAqC,6DAA6D;AAClG;;;;;;;;;ACzDe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACV6C;AAC9B;AACf,YAAY,iDAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,+CAAG;AACf;AACA;AACA,YAAY,gDAAG;AACf;AACA;AACA;;;;;;;;;;AChB6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,oHAAoH;AACtJ,kCAAkC,0HAA0H;AAC5J;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACA;AACe;AACf,YAAY,iDAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,+CAAG;AACP;AACA;AACA;AACA;AACA;AACA,wBAAwB,iDAAS;AACjC;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,wBAAwB,iDAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACrFO;AACA;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACX0D;AAC1D;AACe;AACf,kBAAkB,uDAAe;AACjC;AACA,0BAA0B,uDAAe;AACzC;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA,SAAS;AACT,mBAAmB,oCAAoC;AACvD;AACA;AACA,UAAU,iDAAK,mDAAmD,oDAAQ;AAC1E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpB2C;AACf;AACC;AACO;AACJ;AACc;AACvC;AAC+B;AAC/B;AACuB;AACvB,uCAAuC,sDAAK;AACX;AACxC;AACsF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACb+C;AAC9F;AACK;AACA;AACe;AAChB;AACQ;AACQ;AACZ;AACN;AACzC,qDAAG;AACH;AACA;AACA,gBAAgB,iDAAG;AACnB,qDAAG,aAAa,aAAa;AAC7B;AACA;AACA,qDAAG,gBAAgB,OAAO,UAAU,KAAK,UAAU,KAAK;AACxD;AACA,qGAAqG;AACrG,qDAAG,gBAAgB,OAAO;AAC1B;AACA;AACA,kBAAkB,wEAAc;AAChC,CAAC,qDAAG,kBAAkB,SAAS;AAC/B;AACA,SAAS,4BAA4B,EAAE,gEAAM,yHAAyH,2DAAQ;AAC9K,CAAC,qDAAG,yBAAyB,iBAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA,GAAG,qDAAG,cAAc,KAAK,eAAe,UAAU;AAClD;AACA,WAAW,qCAAqC,EAAE,oEAAU;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,gEAAU;AACtB,+CAA+C,qBAAqB;AACpE;AACA,aAAa,wEAAc;AAC3B;AACA;AACA;AACA;AACA,yCAAyC,2DAAQ;AACjD,yCAAyC,2DAAQ;AACjD;AACA,kBAAkB,2DAAQ;AAC1B;AACA;AACA;AACA,iCAAiC,kEAAQ;AACzC;AACA,OAAO,6DAAe,cAAc,YAAY;AAChD;AACA;AACA;AACA;AACA;AACA,SAAS,qDAAG;AACZ;AACA,iBAAiB,4CAA4C;AAC7D;AACA;AACA;AACA;AACA,qCAAqC,kEAAQ;AAC7C;AACA,SAAS,6DAAe,cAAc,YAAY;AAClD;AACA;AACA;AACA,SAAS,qDAAG;AACZ;AACA;AACA,SAAS,qDAAG;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,OAAO,UAAU,KAAK;AAC/C,kEAAkE,6BAA6B;AAC/F;AACA,0EAA0E;AAC1E;AACA,UAAU;AACV,iCAAiC,KAAK;AACtC,iEAAiE,6BAA6B;AAC9F;AACA,UAAU;AACV,QAAQ;AACR;AACA;AACA;AACA,sBAAsB,oEAAc;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,qBAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA,yBAAyB,qBAAqB;AAC9C;AACA;AACA;AACA;AACA,4CAA4C;AAC5C,yBAAyB,qBAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,2DAAQ;AAClD,0CAA0C,2DAAQ;AAClD,mDAAmD,4CAA4C;AAC/F,gCAAgC,2DAAQ;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kEAAQ;AACvC;AACA,KAAK,6DAAe,cAAc,YAAY;AAC9C,yBAAyB,qBAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,eAAe,0DAAQ;AACvB,gBAAgB,sDAAI;AACpB;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,KAAK;AAChB,WAAW,QAAQ;AACnB,YAAY,mBAAmB;AAC/B;AACA;AACA,CAAC,sDAAG,uCAAuC,SAAS;AACpD;AACA;AACA;AACA;AACA,uCAAuC,IAAI,WAAW,sBAAsB;AAC5E;AACA;AACA,4CAA4C,sBAAsB;AAClE;AACA;AACA;AACA,KAAK,qDAAG,qDAAqD,uBAAuB;AACpF;AACA,MAAM;AACN,IAAI;AACJ;AACA;AACA,yDAAyD,kBAAkB,yBAAyB,kCAAkC;AACtI;AACA;AACA,EAAE;AACF,CAAC,qDAAG,+CAA+C,kCAAkC;AACrF,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY,mBAAmB;AAC/B;AACA;AACA,CAAC,qDAAG,wCAAwC,SAAS,WAAW,MAAM;AACtE;AACA,wCAAwC,IAAI,SAAS,oBAAoB;AACzE;AACA;AACA;AACA,yDAAyD,kCAAkC;AAC3F,gDAAgD,SAAS;AACzD;AACA;AACA,yDAAyD,kCAAkC;AAC3F;AACA;AACA,wDAAwD,oCAAoC;AAC5F,GAAG,qDAAG,uCAAuC,SAAS;AACtD;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;AACA,CAAC,qDAAG;AACJ,uBAAuB,uDAAK,QAAQ,kBAAkB;AACtD,4DAA4D,yBAAyB;AACrF,yBAAyB,gEAAU;AACnC;AACA,cAAc,KAAK;AACnB,cAAc,KAAK;AACnB,cAAc,KAAK;AACnB,cAAc,KAAK;AACnB,WAAW,KAAK,KAAK,+DAAK;AAC1B,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,GAAG;AACP;AACA;AACA;AACA;AACA,CAAC,qDAAG,mDAAmD,UAAU;AACjE;AACA"}